<library-action name="toolsLib">
	<action-javascript>
	
	// Get the containing element of an item
	// item: FWItem
	// Returns: The element to add HTML into or null if it doesn't exist
	FWItem.prototype.element = function()
	{
		if(this == fwPage.fwPageDiv)
			return pageDivElement();
			
		var el = fwDocument.fwTags.fwFind("", this);
		
		// If the item is using graphic effects
		if(this.fwHasSlicedBackground)
		{			
			if(fwPage.fwBrowserCompatibility & 2) // The graphic effect will be a table
			{
				var table = el.fwFind("table");
				if(table) // This should always be here, unless someone has stolen it
				{
					var tableCells = table.fwFindAll("td");
					// If there's a 4th cell then return that, otherwise the effect only uses 1 cell so return that
					return tableCells[4] || tableCells[0];
				}
			}
			else // it will be a collection of divs
			{
				var divs = el.fwFindAll("div");
				for(var i in divs)
					// The div we wants id contains _m
					if(divs[i].id && divs[i].id.toString().match(/_m/))
						return divs[i];
			}
		}
		else
			// Default to returning the enclosing element (no sliced background or another Action has removed graphic effects)
			return el.fwEnclosing; 
	}
	
	// Replace the class of an item without removing the existing classes
	FWTag.prototype.addClass = function(value)
	{
		if(this["class"])
			this["class"] = this["class"].toString().replace(/\"/, "\""+value+" ");
		else
			this["class"] = fwQuote(value);
		return this;
	};
	
	// Add the attributes passed
	FWTag.prototype.attr = function(attr, value)
	{
		// If we've just been passed one arg then return the tags requested attrribute
		if(arguments.length == 1)
			return this[attr];
		
		this[attr] = fwQuote(value);
		// Return this for the chain
		return this;
	};
	
	FWTag.prototype.css = function()
	{
		var styleStr = this.style ? this.style.toString() : "",
			temp = styleStr;
		
		for(var attr in arguments[0])
		{	
			var expr = new RegExp("[\"\;]\\s?"+attr+"\\s?:\\s?[\\d\\w\\s\\-\\.]*;?\\s?"); //"
			var value = (arguments[0][attr]) ? attr+":"+arguments[0][attr]+";" : "";
			
			if(styleStr.match(expr))
				styleStr = (styleStr) ? styleStr.replace(expr, ";"+value) : "\""+value+"\"";
			else
				styleStr = (styleStr) ? styleStr.replace(/([;\"])/, "$1"+value) : "\""+value+"\""; //"
			
			if(styleStr.charAt(0) == ";")
				styleStr = styleStr.substring(1, styleStr.length);
			
			this.style = (styleStr.charAt(0) == "\"") ? styleStr : "\""+styleStr;
		}
		if(this.style == '""')
			this.style = null;
		return this;
	}
	
	function cleanElements() {
		// Fix the doctype
		var doctype = fwDocument.fwTags.fwFind("!doctype");
		if (doctype) {
			newDoctype = doctype.fwEnclosing.fwAdd("!DOCTYPE", doctype, false);
			newDoctype.html = "";
			doctype.fwDelete();
		}
		
		// Remove unnessecary attributes
		// from html element
		var html = fwDocument.fwTags.fwFind("html");
		if (html) {
			html.xmlns = null;
		}
		
		// from charset
		var charset = fwDocument.fwTags.fwFind("meta");
		if (charset) {
			if(charset.content.toString().match("text/html;")) {
				charset["http-equiv"] = null;
				charset.charset = charset.content.toString().replace("text/html; charset=", "");
				charset.content = null;
			}
		}
		
		// from style
		var styles = fwDocument.fwTags.fwFindAll("style");
		for (var i in styles) {
			styles[i].type = null;
			var all = styles[i].fwFindAllContent();
			var styleComments = styles[i].fwFind("!--");
			var selectors = styleComments.fwToHTML().split(/[\n\r]/);
			styles[i].fwIndent();
			styles[i].fwAddRawOpt();
			for (var j in selectors) {
				var selector = selectors[j].toString().match(/(.*?\{)/);
				var properties = selectors[j].toString().match(/\{(.*?)\}/);
				if (selector && selector[1]) {
					styles[i].fwAddRawOpt(selector[1]);
				}
				if (properties && properties[1]) {
					var propertiesArray = properties[1].split(";");
					styles[i].fwIndent();
					for (var k in propertiesArray) {
						if (propertiesArray[k] && propertiesArray[k] != " ")
							styles[i].fwAddRawOpt(propertiesArray[k].replace(/^\s+/, "").replace(/\:([^\s])/, ": $1").replace(/\s$/, "")+";");
					}
					styles[i].fwOutdent();
					styles[i].fwAddRawOpt("}");
				}
				//selectors[j].fwDelete();
			}
			styles[i].fwOutdent();
			for(j in all)
				all[j].fwDelete();
		}
		
		// from script
		var scripts = fwDocument.fwTags.fwFindAll("script");
		for (i in scripts) {
			scripts[i].type = null;
		}
		
		// from link
		var links = fwDocument.fwTags.fwFindAll("link");
		for (i in links) {
			links[i].type = null;
		}
		
		// from images (border has gone so remove that altogether)
		var imgs = fwDocument.fwTags.fwFindAll("img");
		for (i in imgs) {
			imgs[i].border = null;
		}
		
		// from tables (need to add styling attributes as CSS)
		var tables = fwDocument.fwTags.fwFindAll("table")
						.concat(fwDocument.fwTags.fwFindAll("col")
						.concat(fwDocument.fwTags.fwFindAll("th")
						.concat(fwDocument.fwTags.fwFindAll("tr").concat(fwDocument.fwTags.fwFindAll("td")))));
		for (i in tables) {
			tables[i].css({"width": (tables[i].width ? tables[i].width+"px" : ""), // support for %?
							"height": (tables[i].height ? tables[i].height+"px" : ""), // support for %?
							"background-color": tables[i].bgcolor,
							"vertical-align": (tables[i].valign ? tables[i].valign.toString().toLowerCase() : ""),
							"border-spacing": (tables[i].cellspacing ? tables[i].cellspacing+"px" : "")}); // IE support?
			if(tables[i].border)
				tables[i].css({"border": tables[i].border+"px outset gray"});
			var cells = /*(tables[i] == "table") ? */tables[i].fwFindAll("td");// : "";
			if (tables[i].cellpadding && !tables[i].border) {
				for (var j in cells) {
					cells[j].css({"padding": (tables[i].cellpadding ? tables[i].cellpadding+"px" : "")});
				}
			}
			else if (!tables[i].cellpadding && tables[i].border) {
				for (var j in cells) {
					cells[j].css({"border": "1px solid"});
				}
			}
			else if (tables[i].cellpadding && tables[i].border) {
				for (var j in cells) {
					cells[j].css({"padding": (tables[i].cellpadding ? tables[i].cellpadding+"px" : "")});
					cells[j].css({"border": "1px solid"});
				}
			}
			tables[i].width = 
			tables[i].height = 
			tables[i].bgcolor =
			tables[i].border = 
			tables[i].valign = 
			tables[i].cellspacing =
			tables[i].cellpadding = null;
		}
	}

	</action-javascript>
</library-action>

<page-action name="com.softpress.actions.tools.modernize.page" title="Modernize" freeway-version="5">
	
	<action-version version="1.0.0">
		Copyright (c) Joe Billings
	</action-version>
	
	<action-include name="toolsLib">
	
	<action-javascript>
	
	function fwAfterEndHTML() {
		cleanElements();
	}
	
	</action-javascript>
	
</page-action>

<folder-action name="com.softpress.actions.tools.modernize.folder" title="Modernize" freeway-version="5">
	
	<action-version version="1.0.0">
		Copyright (c) Joe Billings
	</action-version>
	
	<action-include name="toolsLib">
	
	<action-javascript>
	
	function fwAfterEndHTML() {
		cleanElements();
	}
	
	</action-javascript>
	
</folder-action>