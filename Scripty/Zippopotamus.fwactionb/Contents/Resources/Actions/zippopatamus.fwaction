<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	//set this to true in order to load the un-packed versions of the libraries
	var debug = false;
	function in_array(theArray,search_term) {
		var i = theArray.length;
		if (i > 0) {
			do {
				if (theArray[i] === search_term) {
					return true;
				}
			} while (i--);
		}
		return false;
	}
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	String.prototype.strip = function() {
		return this.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	var hasClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
		return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
	};

	var addClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		if (!hasClassName(element,className)){
			var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
			var out = (elementClassName + ' ' + className).strip();
			return element["class"] = fwQuote(out);
		}
	};

	var removeClassName = function(element, className) {
		var className = fwQuote(className,'','"');//"
		var elementClassName = (element['class']) ? fwQuote(element['class'],'','"') : '';//"
		elementClassName = elementClassName.replace(
			new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
		return element['class'] = (elementClassName.length > 0) ? fwQuote(elementClassName) : null;
	};
	
	function AddLibraryScript(theTag, theLibraryName)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}

	function AddEventObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('Event.observe(');
		if(theObject != 'window') theObject = fwQuote(theObject,"'");
		scriptTag.fwAddRaw(theObject + ', ');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}
	function AddMarkup(markupName, replacement){
		var theTag = fwDocument.fwTags.fwFind("head");
		if(theTag){
			if(! replacement) replacement = '';
			var scriptTag = theTag.fwAddJavaScript();
			var theMarkup = fwMarkups[markupName].toString().replace(/__COUNTRY__/,replacement);
			theMarkup.fwConvertLineEndings = true;
			scriptTag.fwAddRaw("document.observe('dom:loaded',function(){");
			scriptTag.fwAddRaw(theMarkup);
			scriptTag.fwAddRawln('});');
			theTag.fwAddRawln('');
		}
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	var gLibraries = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
	
	// Clean up the list of libraries by sorting them in their correct order (according to scripty specs) and removing dupes
	function cleanLibs()
	{
		fwPage.scriptyLibs.sort();
		// Get rid of duplicates and out of range values
		var i = 0;
		while(i < fwPage.scriptyLibs.length)
			if(fwPage.scriptyLibs[i+1] && fwPage.scriptyLibs[i] == fwPage.scriptyLibs[i+1])
				fwPage.scriptyLibs.splice(i+1, 1);
			else if(fwPage.scriptyLibs[i] > gLibraries.length-1 || fwPage.scriptyLibs[i] < 0)
				fwPage.scriptyLibs.splice(i, 1);
			else
				i++;
	}
	
	// Build a string containing the scripty libraries used, or return "" if all are used or none are specified
	function getLibs()
	{
		var scriptyLibs = "";
		if(fwPage.scriptyLibs)
		{
			if(fwPage.scriptyLibs.length == gLibraries.length)
			{
				// All scriptyLibs are being used so don't specify any
			}	
			else
			{
				scriptyLibs += "?load=";
				for(var i in fwPage.scriptyLibs)
					scriptyLibs += gLibraries[fwPage.scriptyLibs[i]] + ",";
				scriptyLibs = scriptyLibs.substring(0, scriptyLibs.length-1);
			}
		}
		return scriptyLibs;
	}

	function LinkFileToHead(theTag, file){
		// Get the list of individual scriptyLibs and add it to the end of the scripty reference
		var scriptyLibs = getLibs();
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote((!file.match("scriptaculous") ? file : file+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		// Get the list of individual scriptyLibs and add to the end of the scripty reference
		var scriptyLibs = getLibs();
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.7.0.0/prototype.js" : "scriptaculous/1.9.0/scriptaculous.js"+scriptyLibs));
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"+scriptyLibs));
		}else{
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.0.2/prototype.js" : "scriptaculous/1.8.1/scriptaculous.js"+scriptyLibs));
		}
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}

	function AddFiles(filesString, scriptyLibs /*number or array of numbers*/){
		// Cleanup if arguments are missing
		if(filesString.constructor == Number || filesString.constructor == Array)	{
			scriptyLibs = filesString;
			filesString = "";
		}
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = function(){
			if(fwShellCommand){
				return fwShellCommand('ping -c1 -i1 http://ajax.googleapis.com');
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('do shell script "curl ajax.googleapis.com"'); 
				osa.fwCompile(); 
				return osa.fwRun();
			}
		}
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var canon = 'prototype1700packer,prototype1700,scriptaculous190packer,scriptaculous190'.split(',');
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		}else{
			var canon = 'prototype1602packer,prototype1602,scriptaculous181packer,scriptaculous181'.split(',');
		}
		var files = (useCustom) ? filesString.split(',') : canon;

		if(scriptyLibs){
			// Make the scriptyLibs argument an array if it isn't one already
			scriptyLibs = scriptyLibs.constructor == Array ? scriptyLibs : [scriptyLibs];
			// Create or add the libraries used to a page variable
			if(!fwPage.scriptyLibs)
			fwPage.scriptyLibs = scriptyLibs;
			else
			fwPage.scriptyLibs = fwPage.scriptyLibs.concat(scriptyLibs);
		}

		// Make the overall library list object variable if it doesn't exist
		if(!fwPage.libsList)
		fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file]){
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file]){
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
					fwPage.libsList[file] = path;
					fwParameters[file].fwClear();
				}else{
					fwAlert('Couldn\'t find ' + file);
				}
			}
		}

		if(lastOrders()){
			if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
				if(fwPage.libsList['prototype1700packer'] && fwPage.libsList['prototype1700'])
					fwPage.libsList['prototype1700packer'] = null;
				if(fwPage.libsList['scriptaculous190packer'] && fwPage.libsList['scriptaculous190'])
					fwPage.libsList['scriptaculous190packer'] = null;
			}else if(parseFloat(fwFreewayVersion) >= 5.5){
				if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
					fwPage.libsList['prototype1610packer'] = null;
				if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
					fwPage.libsList['scriptaculous183packer'] = null;
			}else{
				if(fwPage.libsList['prototype1602packer'] && fwPage.libsList['prototype1602'])
					fwPage.libsList['prototype1602packer'] = null;
				if(fwPage.libsList['scriptaculous181packer'] && fwPage.libsList['scriptaculous181'])
					fwPage.libsList['scriptaculous181packer'] = null;
			}

			// Clean the list of individual libs
			if(fwPage.scriptyLibs) cleanLibs();

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected() ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	

</action-javascript>
</library-action>

<page-action name="com.walterdavisstudio.zippopotamus" title="Zippopotamus">
<action-version version="0.1.3">
Zippopotamus
(c)2012 Walter Lee Davis

Apply this Action to your page to add automatic Zip code lookup through the Zippopotam.us service.

</action-version>

<action-markup custom name="zippopotamus">
	$$('input.zip').invoke('observe', 'change', function(evt) {
		var token = $F(this);
		if(token.match(/[^\d]+/) && token.match(/\s/)) token = token.split(/\s/).first();
		var transport = new XMLHttpRequest();
		transport.open('GET', 'http://api.zippopotam.us/__COUNTRY__/' + token, true);
		transport.onreadystatechange = function() {
			if(transport.readyState == 4) {
				var data = transport.responseText.evalJSON();
				if(data.places){
					$$('.city').invoke('setValue', data.places.first()['place name']);
					$$('.state').invoke('setValue', data.places.first().state);
				}
			};
		};
		transport.send();
	});
</action-markup>
<action-file name ="prototype1700packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="prototype1602packer" var/>
<action-popup name="country" title="Country">
<value name="AD" title="Andorra" />
<value name="AR" title="Argentina" />
<value name="AS" title="American Samoa" />
<value name="AT" title="Austria" />
<value name="AU" title="Australia" />
<value name="BD" title="Bangladesh" />
<value name="BE" title="Belgium" />
<value name="BG" title="Bulgaria" />
<value name="BR" title="Brazil" />
<value name="CA" title="Canada" />
<value name="CH" title="Switzerland" />
<value name="CZ" title="Czech Republic" />
<value name="DE" title="Germany" />
<value name="DK" title="Denmark" />
<value name="DO" title="Dominican Republic" />
<value name="ES" title="Spain" />
<value name="FI" title="Finland" />
<value name="FO" title="Faroe Islands" />
<value name="FR" title="France" />
<value name="GB" title="Great Britain" />
<value name="GF" title="French Guyana" />
<value name="GG" title="Guernsey" />
<value name="GL" title="Greenland" />
<value name="GP" title="Guadeloupe" />
<value name="GT" title="Guatemala" />
<value name="GU" title="Guam" />
<value name="GY" title="Guyana" />
<value name="HR" title="Croatia" />
<value name="HU" title="Hungary" />
<value name="IM" title="Isle of Man" />
<value name="IN" title="India" />
<value name="IS" title="Iceland" />
<value name="IT" title="Italy" />
<value name="JE" title="Jersey" />
<value name="JP" title="Japan" />
<value name="LI" title="Liechtenstein" />
<value name="LK" title="Sri Lanka" />
<value name="LT" title="Lithuania" />
<value name="LU" title="Luxembourg" />
<value name="MC" title="Monaco" />
<value name="MD" title="Moldavia" />
<value name="MH" title="Marshall Islands" />
<value name="MK" title="Macedonia" />
<value name="MP" title="Northern Mariana Islands" />
<value name="MQ" title="Martinique" />
<value name="MX" title="Mexico" />
<value name="MY" title="Malaysia" />
<value name="NL" title="Holland" />
<value name="NO" title="Norway" />
<value name="NZ" title="New Zealand" />
<value name="PH" title="Phillippines" />
<value name="PK" title="Pakistan" />
<value name="PL" title="Poland" />
<value name="PM" title="Saint Pierre and Miquelon" />
<value name="PR" title="Puerto Rico" />
<value name="PT" title="Portugal" />
<value name="RE" title="French Reunion" />
<value name="RU" title="Russia" />
<value name="SE" title="Sweden" />
<value name="SI" title="Slovenia" />
<value name="SJ" title="Svalbard & Jan Mayen Islands" />
<value name="SK" title="Slovak Republic" />
<value name="SM" title="San Marino" />
<value name="TH" title="Thailand" />
<value name="TR" title="Turkey" />
<value name="US" title="United States" />
<value name="VA" title="Vatican" />
<value name="VI" title="Virgin Islands" />
<value name="YT" title="Mayotte" />
<value name="ZA" title="South Africa" />
</action-popup>

<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function fwAfterStartHead(){
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var filesString = 'prototype1700packer';
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var filesString = 'prototype1610packer';
		}else{
			var filesString = 'prototype1602packer';
		}
		AddFiles(filesString,[]);
	}
	function fwBeforeEndBody(){
		var inputs = fwDocument.fwTags.fwFindAll('input');
		if(!fwPage.zippopotamus){
			fwPage['zippopotamus'] = true;
			AddMarkup('zippopotamus',fwParameters['country'].fwValue);
		}
		for (var i = inputs.length - 1; i >= 0; i--){
			if(inputs[i].name.toString().match(/zip/i)) addClassName(inputs[i], 'zip');
			if(inputs[i].name.toString().match(/state/i)) addClassName(inputs[i], 'state');
			if(inputs[i].name.toString().match(/city/i)) addClassName(inputs[i], 'city');
		};
	}
</action-javascript>
</page-action>
<action name="com.walterdavisstudio.zippopotamus_country" title="Zippopotamus Country" height="12">
<action-version version="0.1.3">
Zippopotamus Country
(c)2012 Walter Lee Davis

Insert this Action in place of your form’s country picker to add automatic Zip code lookup through the Zippopotam.us service.

</action-version>

<action-markup custom name="zippopotamus">
	$$('input.zip').invoke('observe', 'change', function(evt) {
		var token = $F(this);
		if(token.match(/[^\d]+/) && token.match(/\s/)) token = token.split(/\s/).first();
		var transport = new XMLHttpRequest();
		transport.open('GET', 'http://api.zippopotam.us/' + $F('country') + '/' + token, true);
		transport.onreadystatechange = function() {
			if(transport.readyState == 4) {
				var data = transport.responseText.evalJSON();
				if(data.places){
					$$('.city').invoke('setValue', data.places.first()['place name']);
					$$('.state').invoke('setValue', data.places.first().state);
				}
			};
		};
		transport.send();
	});
</action-markup>
<action-markup custom name="country_picker">
	<select name="country" id="country" size="1">
		<option value="AD" title="Andorra">Andorra</option>
	  <option value="AR" title="Argentina">Argentina</option>
	  <option value="AS" title="American Samoa">American Samoa</option>
	  <option value="AT" title="Austria">Austria</option>
	  <option value="AU" title="Australia">Australia</option>
	  <option value="BD" title="Bangladesh">Bangladesh</option>
	  <option value="BE" title="Belgium">Belgium</option>
	  <option value="BG" title="Bulgaria">Bulgaria</option>
	  <option value="BR" title="Brazil">Brazil</option>
	  <option value="CA" title="Canada">Canada</option>
	  <option value="CH" title="Switzerland">Switzerland</option>
	  <option value="CZ" title="Czech Republic">Czech Republic</option>
	  <option value="DE" title="Germany">Germany</option>
	  <option value="DK" title="Denmark">Denmark</option>
	  <option value="DO" title="Dominican Republic">Dominican Republic</option>
	  <option value="ES" title="Spain">Spain</option>
	  <option value="FI" title="Finland">Finland</option>
	  <option value="FO" title="Faroe Islands">Faroe Islands</option>
	  <option value="FR" title="France">France</option>
	  <option value="GB" title="Great Britain">Great Britain</option>
	  <option value="GF" title="French Guyana">French Guyana</option>
	  <option value="GG" title="Guernsey">Guernsey</option>
	  <option value="GL" title="Greenland">Greenland</option>
	  <option value="GP" title="Guadeloupe">Guadeloupe</option>
	  <option value="GT" title="Guatemala">Guatemala</option>
	  <option value="GU" title="Guam">Guam</option>
	  <option value="GY" title="Guyana">Guyana</option>
	  <option value="HR" title="Croatia">Croatia</option>
	  <option value="HU" title="Hungary">Hungary</option>
	  <option value="IM" title="Isle of Man">Isle of Man</option>
	  <option value="IN" title="India">India</option>
	  <option value="IS" title="Iceland">Iceland</option>
	  <option value="IT" title="Italy">Italy</option>
	  <option value="JE" title="Jersey">Jersey</option>
	  <option value="JP" title="Japan">Japan</option>
	  <option value="LI" title="Liechtenstein">Liechtenstein</option>
	  <option value="LK" title="Sri Lanka">Sri Lanka</option>
	  <option value="LT" title="Lithuania">Lithuania</option>
	  <option value="LU" title="Luxembourg">Luxembourg</option>
	  <option value="MC" title="Monaco">Monaco</option>
	  <option value="MD" title="Moldavia">Moldavia</option>
	  <option value="MH" title="Marshall Islands">Marshall Islands</option>
	  <option value="MK" title="Macedonia">Macedonia</option>
	  <option value="MP" title="Northern Mariana Islands">Northern Mariana Islands</option>
	  <option value="MQ" title="Martinique">Martinique</option>
	  <option value="MX" title="Mexico">Mexico</option>
	  <option value="MY" title="Malaysia">Malaysia</option>
	  <option value="NL" title="Holland">Holland</option>
	  <option value="NO" title="Norway">Norway</option>
	  <option value="NZ" title="New Zealand">New Zealand</option>
	  <option value="PH" title="Phillippines">Phillippines</option>
	  <option value="PK" title="Pakistan">Pakistan</option>
	  <option value="PL" title="Poland">Poland</option>
	  <option value="PM" title="Saint Pierre and Miquelon">Saint Pierre and Miquelon</option>
	  <option value="PR" title="Puerto Rico">Puerto Rico</option>
	  <option value="PT" title="Portugal">Portugal</option>
	  <option value="RE" title="French Reunion">French Reunion</option>
	  <option value="RU" title="Russia">Russia</option>
	  <option value="SE" title="Sweden">Sweden</option>
	  <option value="SI" title="Slovenia">Slovenia</option>
	  <option value="SJ" title="Svalbard & Jan Mayen Islands">Svalbard & Jan Mayen Islands</option>
	  <option value="SK" title="Slovak Republic">Slovak Republic</option>
	  <option value="SM" title="San Marino">San Marino</option>
	  <option value="TH" title="Thailand">Thailand</option>
	  <option value="TR" title="Turkey">Turkey</option>
	  <option value="US" title="United States">United States</option>
	  <option value="VA" title="Vatican">Vatican</option>
	  <option value="VI" title="Virgin Islands">Virgin Islands</option>
	  <option value="YT" title="Mayotte">Mayotte</option>
	  <option value="ZA" title="South Africa">South Africa</option>
  </select>
</action-markup>
<action-file name ="prototype1700packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="prototype1602packer" var/>

<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function fwAfterStartHead(){
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var filesString = 'prototype1700packer';
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var filesString = 'prototype1610packer';
		}else{
			var filesString = 'prototype1602packer';
		}
		AddFiles(filesString,[]);
	}
	function fwBeforeEndBody(){
		var inputs = fwDocument.fwTags.fwFindAll('input');
		if(!fwPage.zippopotamus){
			fwPage['zippopotamus'] = true;
			AddMarkup('zippopotamus');
		}
		for (var i = inputs.length - 1; i >= 0; i--){
			if(inputs[i].name.toString().match(/zip/i)) addClassName(inputs[i], 'zip');
			if(inputs[i].name.toString().match(/country/i)) addClassName(inputs[i], 'country');
			if(inputs[i].name.toString().match(/state/i)) addClassName(inputs[i], 'state');
			if(inputs[i].name.toString().match(/city/i)) addClassName(inputs[i], 'city');
		};
	}
	function fwAtContent(){
		var thisItem = fwDocument.fwTags.fwFind(fwItem);
		var theMarkup = fwMarkups['country_picker'].toString();
		theMarkup.fwConvertLineEndings = true;
		fwDocument.fwWrite(theMarkup);
	}
	
</action-javascript>
</action>
