<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	//set this to true in order to load the un-packed versions of the libraries
	var debug = false;
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	String.prototype.strip = function() {
		return this.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	var hasClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
		return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
	};

	var addClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		if (!hasClassName(element,className)){
			var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
			var out = (elementClassName + ' ' + className).strip();
			return element["class"] = fwQuote(out);
		}
	};

	var removeClassName = function(element, className) {
		var className = fwQuote(className,'','"');//"
		var elementClassName = (element['class']) ? fwQuote(element['class'],'','"') : '';//"
		elementClassName = elementClassName.replace(
			new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
		return element['class'] = (elementClassName.length > 0) ? fwQuote(elementClassName) : null;
	};
	
	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = (fwParameters[theFunction]) ? fwParameters[theFunction].toString() : theFunction.toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	var gLibraries = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
	
	// Clean up the list of libraries by sorting them in their correct order (according to scripty specs) and removing dupes
	function cleanLibs()
	{
		fwPage.scriptyLibs.sort();
		// Get rid of duplicates and out of range values
		var i = 0;
		while(i < fwPage.scriptyLibs.length)
			if(fwPage.scriptyLibs[i+1] && fwPage.scriptyLibs[i] == fwPage.scriptyLibs[i+1])
				fwPage.scriptyLibs.splice(i+1, 1);
			else if(fwPage.scriptyLibs[i] > gLibraries.length-1 || fwPage.scriptyLibs[i] < 0)
				fwPage.scriptyLibs.splice(i, 1);
			else
				i++;
	}
	
	// Build a string containing the scripty libraries used, or return "" if all are used or none are specified
	function getLibs()
	{
		var scriptyLibs = "";
		if(fwPage.scriptyLibs)
		{
			if(fwPage.scriptyLibs.length == gLibraries.length)
			{
				// All scriptyLibs are being used so don't specify any
			}	
			else
			{
				scriptyLibs += "?load=";
				for(var i in fwPage.scriptyLibs)
					scriptyLibs += gLibraries[fwPage.scriptyLibs[i]] + ",";
				scriptyLibs = scriptyLibs.substring(0, scriptyLibs.length-1);
			}
		}
		return scriptyLibs;
	}

	function LinkFileToHead(theTag, file){
		// Get the list of individual scriptyLibs and add it to the end of the scripty reference
		var scriptyLibs = getLibs();
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote((!file.match("scriptaculous") ? file : file+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		// Get the list of individual scriptyLibs and add to the end of the scripty reference
		var scriptyLibs = getLibs();
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.7.0.0/prototype.js" : "scriptaculous/1.9.0/scriptaculous.js"+scriptyLibs));
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"+scriptyLibs));
		}else{
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.0.2/prototype.js" : "scriptaculous/1.8.1/scriptaculous.js"+scriptyLibs));
		}
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}

	function AddFiles(filesString, scriptyLibs /*number or array of numbers*/){
		// Cleanup if arguments are missing
		if(filesString.constructor == Number || filesString.constructor == Array)	{
			scriptyLibs = filesString;
			fileString = "";
		}
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = function(){
			if(fwShellCommand){
				return fwShellCommand('ping -c1 -i1 http://ajax.googleapis.com');
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('do shell script "curl ajax.googleapis.com"'); 
				osa.fwCompile(); 
				return osa.fwRun();
			}
		}
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var canon = 'prototype1700packer,prototype1700,scriptaculous190packer,scriptaculous190'.split(',');
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		}else{
			var canon = 'prototype1602packer,prototype1602,scriptaculous181packer,scriptaculous181'.split(',');
		}
		var files = (useCustom) ? filesString.split(',') : canon;

		if(scriptyLibs){
			// Make the scriptyLibs argument an array if it isn't one already
			scriptyLibs = scriptyLibs.constructor == Array ? scriptyLibs : [scriptyLibs];
			// Create or add the libraries used to a page variable
			if(!fwPage.scriptyLibs)
			fwPage.scriptyLibs = scriptyLibs;
			else
			fwPage.scriptyLibs = fwPage.scriptyLibs.concat(scriptyLibs);
		}

		// Make the overall library list object variable if it doesn't exist
		if(!fwPage.libsList)
		fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file]){
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file]){
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
					fwPage.libsList[file] = path;
					fwParameters[file].fwClear();
				}else{
					fwAlert(ParamString(kFileNotFound, file, ".js"));
				}
			}
		}

		if(lastOrders()){
			if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
				if(fwPage.libsList['prototype1700packer'] && fwPage.libsList['prototype1700'])
					fwPage.libsList['prototype1700packer'] = null;
				if(fwPage.libsList['scriptaculous190packer'] && fwPage.libsList['scriptaculous190'])
					fwPage.libsList['scriptaculous190packer'] = null;
			}else if(parseFloat(fwFreewayVersion) >= 5.5){
				if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
					fwPage.libsList['prototype1610packer'] = null;
				if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
					fwPage.libsList['scriptaculous183packer'] = null;
			}else{
				if(fwPage.libsList['prototype1602packer'] && fwPage.libsList['prototype1602'])
					fwPage.libsList['prototype1602packer'] = null;
				if(fwPage.libsList['scriptaculous181packer'] && fwPage.libsList['scriptaculous181'])
					fwPage.libsList['scriptaculous181packer'] = null;
			}

			// Clean the list of individual libs
			if(fwPage.scriptyLibs) cleanLibs();

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected() ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}
	
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	
</action-javascript>
</library-action>
<action-encoding>UTF-8</action-encoding>

<page-action name="com.wdstudio.scriptylazyload" title="ScriptyLazyLoad">
<action-version version="0.3.2">
ScriptyLazyLoad Action (c)2012 Walter Lee Davis.

Apply the Action to your page to cause all images to "lazy-load", making the page load more quickly.
</action-version>
<action-file name ="prototype1700packer" var/>
<action-file name ="scriptaculous190packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1602packer" var/>
<action-file name ="scriptaculous181packer" var/>
<action-file name ="ajaxwait" var/>
<action-checkbox name="spin" title="Use loading spinner" default="no" />
<action-markup custom name="lazy">if(typeof Element.store == 'undefined'){
  Element.addMethods({
    store: function(e, k, v){
      e._prototypeStorage = e._prototypeStorage || {};
      e._prototypeStorage[k] = v;
    },
    retrieve: function(e, k){
      e._prototypeStorage = e._prototypeStorage || {};
      return (e._prototypeStorage[k]);
    }
  });
}
// kangax's method for determining if an element is currently visible
function withinViewport(el) {
  var elOffset = el.cumulativeOffset(),
  vpOffset = document.viewport.getScrollOffsets(),
  elDim = el.getDimensions(),
  vpDim = document.viewport.getDimensions();
  if (elOffset[1] + elDim.height < vpOffset[1] || elOffset[1] > vpOffset[1] + vpDim.height ||
    elOffset[0] + elDim.width < vpOffset[0]  || elOffset[0] > vpOffset[0] + vpDim.width) {
    return false;
  }
  return true;
};
var placeholder = '__placeholder__';
var images = $$('img').reject(function(elm){return (elm.src && elm.src.include(placeholder))});
// setup
images.each(function(elm){
  if(elm.src && ! withinViewport(elm)){
    elm.store('_src', elm.src);
    elm.src = placeholder;
  }
  __spinner__
});
// check after each change to the viewport
function lazyLoad(){
  images.each(function(elm){
    if (elm.src.include(placeholder) && withinViewport(elm)) {
      elm.src = elm.retrieve('_src');
    }
  })
};
Event.observe(window, 'resize', lazyLoad);
Event.observe(window, 'scroll', lazyLoad);</action-markup>

<action-javascript>
<action-include name="scriptyHandlerFunctions">
function fwInterface(){
	fwPage.libsList = new Object();
}	

function fwAfterStartHead(){
	var filesString = '';
	var scriptyLibs = [];
	if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
		filesString = 'prototype1700packer';
	}else if(parseFloat(fwFreewayVersion) >= 5.5){
		filesString = 'prototype1610packer';
	}else{
		filesString = 'prototype1602packer';
	}
	AddFiles(filesString, scriptyLibs);
}

function fwBeforeEndHead(){
  var src = fwSubstitute(fwMarkups['lazy'].toString().replace(/__placeholder__/,this.fwClearGif));
  if(fwParameters['spin'].fwBoolValue){
  	var path = this.fwPathName;
  	var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
  	myFile = new FWFile;
  	myFile.fwOpenRead(prefix + 'ajaxwait.gif');
  	myFile.fwClose();
  	fwParameters['ajaxwait'].fwSpecify(myFile);
  	var ajaxwait = fwParameters['ajaxwait'].toString();
  	fwParameters['ajaxwait'].fwClear();
    src = src.replace(/__spinner__/,'elm.setStyle("background: #eee url(' + ajaxwait + ') center center no-repeat");');
  }else{
    src = src.replace(/__spinner__/,'');
  }
  AddObserver(fwDocument.fwTags.fwFind("head"), src, 'document','dom:loaded');
}
</action-javascript>
</page-action>
