<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	function in_array(theArray,search_term) {
		var i = theArray.length;
		if (i > 0) {
			do {
				if (theArray[i] === search_term) {
					return true;
				}
			} while (i--);
		}
		return false;
	}
	
	function shell_exec(script){
		if(fwShellCommand) {
			return fwShellCommand(script);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('try\n' + 
			'set theResult to do shell script "' + script + '"\n' +
			'return theResult\n' +
			'on error\n' +
			'return 0\n' +
			'end try');
			osa.fwCompile(); 
			return osa.fwRun();
		}
	}
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	String.prototype.strip = function() {
		return this.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	var hasClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
		return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
	};

	var addClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		if (!hasClassName(element,className)){
			var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
			var out = (elementClassName + ' ' + className).strip();
			return element["class"] = fwQuote(out);
		}
	};

	var removeClassName = function(element, className) {
		var className = fwQuote(className,'','"');//"
		var elementClassName = (element['class']) ? fwQuote(element['class'],'','"') : '';//"
		elementClassName = elementClassName.replace(
			new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
		return element['class'] = (elementClassName.length > 0) ? fwQuote(elementClassName) : null;
	};
	
	function GetPageDiv(){
		var divs = fwDocument.fwTags.fwFindAll('div');
		for (i in divs){
			if (divs[i] && divs[i].id && divs[i].id.toString().indexOf('PageDiv') > -1) return divs[i];
		}
		return false;
	}

	function AddLibraryScript(theTag, theLibraryName)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}

	function AddEventObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('Event.observe(');
		if(theObject != 'window') theObject = fwQuote(theObject,"'");
		scriptTag.fwAddRaw(theObject + ', ');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = (fwParameters[theFunction]) ? fwParameters[theFunction].toString() : theFunction.toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	var gLibraries = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
	
	// Clean up the list of libraries by sorting them in their correct order (according to scripty specs) and removing dupes
	function cleanLibs()
	{
		fwPage.scriptyLibs.sort();
		// Get rid of duplicates and out of range values
		var i = 0;
		while(i < fwPage.scriptyLibs.length)
			if(fwPage.scriptyLibs[i+1] && fwPage.scriptyLibs[i] == fwPage.scriptyLibs[i+1])
				fwPage.scriptyLibs.splice(i+1, 1);
			else if(fwPage.scriptyLibs[i] > gLibraries.length-1 || fwPage.scriptyLibs[i] < 0)
				fwPage.scriptyLibs.splice(i, 1);
			else
				i++;
	}
	
	// Build a string containing the scripty libraries used, or return "" if all are used or none are specified
	function getLibs()
	{
		var scriptyLibs = "";
		if(fwPage.scriptyLibs)
		{
			if(fwPage.scriptyLibs.length == gLibraries.length)
			{
				// All scriptyLibs are being used so don't specify any
			}	
			else
			{
				scriptyLibs += "?load=";
				for(var i in fwPage.scriptyLibs)
					scriptyLibs += gLibraries[fwPage.scriptyLibs[i]] + ",";
				scriptyLibs = scriptyLibs.substring(0, scriptyLibs.length-1);
			}
		}
		return scriptyLibs;
	}

	function LinkFileToHead(theTag, file){
		// Get the list of individual scriptyLibs and add it to the end of the scripty reference
		var scriptyLibs = getLibs();
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote((!file.match("scriptaculous") ? file : file+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		// Get the list of individual scriptyLibs and add to the end of the scripty reference
		var scriptyLibs = getLibs();
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.7.0.0/prototype.js" : "scriptaculous/1.9.0/scriptaculous.js"+scriptyLibs));
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"+scriptyLibs));
		}else{
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.0.2/prototype.js" : "scriptaculous/1.8.1/scriptaculous.js"+scriptyLibs));
		}
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}

	function AddFiles(filesString, scriptyLibs /*number or array of numbers*/){
		// Cleanup if arguments are missing
		if(filesString.constructor == Number || filesString.constructor == Array)	{
			scriptyLibs = filesString;
			fileString = "";
		}
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = function(){
			if(fwShellCommand){
				return fwShellCommand('ping -c1 -i1 http://ajax.googleapis.com');
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('do shell script "curl ajax.googleapis.com"'); 
				osa.fwCompile(); 
				return osa.fwRun();
			}
		}
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var canon = 'prototype1700packer,prototype1700,scriptaculous190packer,scriptaculous190'.split(',');
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		}else{
			var canon = 'prototype1602packer,prototype1602,scriptaculous181packer,scriptaculous181'.split(',');
		}
		var files = (useCustom) ? filesString.split(',') : canon;

		if(scriptyLibs){
			// Make the scriptyLibs argument an array if it isn't one already
			scriptyLibs = scriptyLibs.constructor == Array ? scriptyLibs : [scriptyLibs];
			// Create or add the libraries used to a page variable
			if(!fwPage.scriptyLibs)
			fwPage.scriptyLibs = scriptyLibs;
			else
			fwPage.scriptyLibs = fwPage.scriptyLibs.concat(scriptyLibs);
		}

		// Make the overall library list object variable if it doesn't exist
		if(!fwPage.libsList)
		fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file]){
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file]){
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
					fwPage.libsList[file] = path;
					fwParameters[file].fwClear();
				}else{
					fwAlert(ParamString(kFileNotFound, file, ".js"));
				}
			}
		}

		if(lastOrders()){
			if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
				if(fwPage.libsList['prototype1700packer'] && fwPage.libsList['prototype1700'])
				fwPage.libsList['prototype1700packer'] = null;
				if(fwPage.libsList['scriptaculous190packer'] && fwPage.libsList['scriptaculous190'])
				fwPage.libsList['scriptaculous190packer'] = null;
			}else if(parseFloat(fwFreewayVersion) >= 5.5){
				if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
					fwPage.libsList['prototype1610packer'] = null;
				if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
					fwPage.libsList['scriptaculous183packer'] = null;
			}else{
				if(fwPage.libsList['prototype1602packer'] && fwPage.libsList['prototype1602'])
					fwPage.libsList['prototype1602packer'] = null;
				if(fwPage.libsList['scriptaculous181packer'] && fwPage.libsList['scriptaculous181'])
					fwPage.libsList['scriptaculous181packer'] = null;
			}

			// Clean the list of individual libs
			if(fwPage.scriptyLibs) cleanLibs();

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected() ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}

	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	
	function GetWidth(tag){
		//calculates total width of CSS styled element
		// somewhat naive: border * 2 + margin + padding + width
		var width = GetCSSAttribute(tag,'width');
		if(width) {
			width = parseInt(width.toString().replace(/[^\d+]/g,''),10);
		}else{
			width = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			width += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					width += parseInt(padding[1],10);
					width += parseInt(padding[3],10);
					break;
				case 2:
					width += parseInt(padding[1] * 2,10);
					break;
				case 1:
					width += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					width += parseInt(margin[1],10);
					width += parseInt(margin[3],10);
					break;
				case 2:
					width += parseInt(margin[1] * 2,10);
					break;
				case 1:
					width += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return width + 'px';
	}
	
	function GetHeight(tag){
		//calculates total height of CSS styled element
		// somewhat naive: border * 2 + margin + padding + height
		var height = GetCSSAttribute(tag,'height');
		var minHeight = GetCSSAttribute(tag,'min-height');
		if(height){
			height = parseInt(height.toString().replace(/[^\d+]/g,''),10);
		}else if(minHeight){
			height = parseInt(minHeight.toString().replace(/[^\d+]/g,''),10);
		}else{
			height = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			height += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					height += parseInt(padding[0],10);
					height += parseInt(padding[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					height += parseInt(margin[0],10);
					height += parseInt(margin[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return height + 'px';
	}

</action-javascript>
</library-action>

<item-action name="ScriptyLightbox2">
<action-version version="0.7.2">
ScriptyLightbox2 Action
Copyright (c) Walter Davis Studio 2011
</action-version>
<action-file name ="prototype1700packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="prototype1602packer" var/>
<action-file name ="closebox" var/>
<action-file name ="ajaxload" var/>
<action-checkbox name="pages" title="Use Page/URL as Target" default="no" />
<action-file name = "original" title="Original File" />
<action-url name = "original_page" title="Page/URL" />
<action-checkbox name="autoplay" title="Auto-Play" default="no" advance="no" />
<action-number name = "width" title="Width" />
<action-number name = "height" title="Height" />
<action-markup custom name="overlay_style">.overlay {
	position: absolute;
	top: 0;
	left: 0;
	z-index: 1000;
	border: none;
	-webkit-box-shadow: 0px 2px 20px #000;
	-moz-box-shadow: 0px 2px 20px #000;
	box-shadow: 0px 2px 20px #000;
	-moz-border-radius: 13px;
	-webkit-border-radius: 13px;
	border-radius: 13px;
	padding: 16px;
	background: #000 url(_ajaxload_) no-repeat center center;
}
.overlay p {
	text-align: center;
	vertical-align: center;
	height:100%;
	padding:0;
	margin:0;
}
.overlay iframe {
	border: none;
	height: 100%;
	width: 100%;
	padding: 0;
	margin: 0;
}
#_closer {
	display: block;
	position: absolute;
	top: -12px;
	left: -12px;
	width: 30px;
	height: 30px;
	cursor: pointer;
	background-image: url(_closebox_);
}
img.popup {
	max-width: 100%;
	max-height: 100%
}
</action-markup>
<action-markup custom name="overlay">//read the dimensions out of the filename string
function read_geometry(str){
	var out = {'width':640,'height':480};
	if(str.length > 3 && str.include('x')){
		var parts = str.match(/\d{1,4}x\d{1,4}/);
		if(parts.length > 0){
			var dims = parts[0].split(/x/);
			if(dims[0] && dims[1]){
				out.width = parseInt(dims[0],10);
				out.height = parseInt(dims[1],10);
			}
		}
	}
	return out
}
function read_autoplay(str){
	var out = 'false';
	if(str.length > 3 && str.include('autoplay')){
		var parts = str.match(/autoplay:(true|false)/);
		if(parts.length > 0){
			return parts[1];
		}
	}
	return out
}
Element.addMethods({
	resizeToOverlay: function(element){
		var element = $(element);
		var width = element.getWidth();
		var height = element.getHeight();
		var ratio = Math.round((parseInt(width,10) / parseInt(height,10)) * 100) / 100;
		var screen = document.viewport.getDimensions();
		var screen_ratio = Math.round((parseInt(screen.width,10) / parseInt(screen.height,10)) * 100) / 100;
		if(ratio > screen_ratio){
			//photo is wide format, screen is not so go width-wise first, then set height
			if (width > (screen.width * .8)){
				var new_width = (Math.round(screen.width * .8));
				element.setStyle('width:' + new_width.toString() + 'px; height:' + Math.round(new_width / ratio).toString() + 'px');
			}
		}else{
			//go height-wise first, then set width
			if(element.getHeight() > (screen.height * .8)){
				var new_height = (Math.round(screen.height * .8));
				new_width = Math.round(new_height * ratio);
				element.setStyle('height:' + new_height.toString() + 'px; width:' + new_width.toString() + 'px');
			}
		}
		element.setStyle('top:' + (Math.floor(screen.height - element.getHeight()) / 2 + document.viewport.getScrollOffsets().top).toString() + 'px; left:' + ((Math.floor(screen.width - element.getWidth()) / 2) - $('PageDiv').positionedOffset().left).toString() + 'px;');
		element.setOpacity(1);
	}
});
//center the player in the window
function center_player(){
	var elm = $('_player');
	var view = document.viewport.getDimensions();
	var container = elm.getDimensions();
	elm.setStyle('top:' + (Math.floor(view.height - container.height) / 2 + document.viewport.getScrollOffsets().top).toString() + 'px; left:' + ((Math.floor(view.width - container.width) / 2) - $('PageDiv').positionedOffset().left).toString() + 'px;');
	return Element.setOpacity.delay(0.1,elm,1);
}
//loop through all of the popup links, if any
$$('a.popup').each(function(elm){
	//try to get the dimensions of the movie out of the filename, fall back to 640x480
	if(elm.rel){
		var geometry = read_geometry(elm.rel.toString());
		var autoplay = read_autoplay(elm.rel.toString());
	}else{
		var geometry = {'width':640,'height':480};
		var autoplay = 'false';
	}
	elm.observe('click',function(evt){
		evt.stop();
		if($('_player')) $('_player').remove();
		var player = new Element('div',{
			id:'_player',
			'class':'overlay'
			}
		);
		$('PageDiv').insert(player);
		player.setOpacity(0);
		var extension = elm.href.toString().substr(elm.href.lastIndexOf('.') + 1).split(/[\?#]/)[0].toLowerCase();
		if(geometry && $w('htm html asp php jsp').include(extension)){
			player.setStyle('width:' + (geometry.width) + 'px; height:' + (geometry.height + 16) + 'px;');
			var iframe = new Template('<iframe width="#{width}" height="#{height}" border="0" src="#{src}"></iframe>');
			vars = {'height':(geometry.height), 'width':geometry.width, 'src':elm.href};
			player.update(iframe.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if(geometry && $w('mov m4v mp4').include(extension)){
			player.setStyle('width:' + (geometry.width) + 'px; height:' + (geometry.height + 16) + 'px;');
			var qt = new Template('<p><object width="#{width}" height="#{height}" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab"> <param name="src" value="#{src}"/> <param name="controller" value="true"/> <param name="autoplay" value="#{autoplay}"/> <embed src="#{src}" width="#{width}" height="#{height}" controller="true" scale="tofit" cache="true" autoplay="#{autoplay}" pluginspage="http://www.apple.com/quicktime/download/" /></object></p>');
			vars = {'height':(geometry.height + 16), 'width':geometry.width, 'src':elm.href, 'autoplay' : autoplay};
			player.update(qt.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if(geometry && extension == 'swf'){
			player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
			var swf = new Template('<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="#{width}" height="#{height}" align="middle"><param name="allowScriptAccess" value="sameDomain"/><param name="movie" value="#{src}"/><param name="quality" value="high"/><embed src="#{src}" quality="high" width="#{width}" height="#{height}" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/></object></p>');
			vars = {'height':geometry.height, 'width':geometry.width, 'src':elm.href};
			player.update(swf.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if($w('jpg jpeg png gif').include(extension)){
			var img = new Template('<p><img src="#{src}" class="popup" alt="#{src}" /></p>');
			player.update(img.evaluate({'src':elm.href}));
			if (!!geometry){
				player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
			}else{
				if(player.down('img')){
					geometry = player.down('img').getDimensions();
					player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
				}
			}
			Element.resizeToOverlay.delay(0.1,player);
		}
		player.insert({top:'<span id="_closer"></span>'});
	});
});
//close the player when the close box is clicked
document.observe('click',function(evt){
	var elm;
	if( evt.findElement('#_closer') ){
		if($('_player')){
			$('_player').remove();
		}
	}
});
//hide the player on stray touch events (iOS only)
document.observe('touchstart',function(evt){
	if(evt.findElement('#_player') || evt.findElement('a.popup')){
		//ignore
	}else if(evt.findElement('#_closer')){
		if($('_player')){
			$('_player').remove();
		}
	}else{
		if($('_player')){
			$('_player').remove();
		}
	}
});</action-markup>
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function fwInterface(){
		fwPage.libsList = new Object();
		var active = false; 
		if (fwParameters.original.fwHasFile){ 
			var myFile = fwParameters["original"].fwFileName.toString(); 
			active = ( myFile.substr(myFile.lastIndexOf('.') + 1).toLowerCase().match(/(mov|m4v|mp4)/) != null ); 
		}
		fwParameters['autoplay'].fwVisible = active; 
		fwParameters['original'].fwVisible = ! fwParameters['pages'].fwBoolValue
		fwParameters['original_page'].fwVisible = !! fwParameters['pages'].fwBoolValue
	}
	function fwAfterStartHead()
	{
		var filesString = '';
		var scriptyLibs = [];
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			filesString = 'prototype1700packer';
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			filesString = 'prototype1610packer';
		}else{
			filesString = 'prototype1602packer';
		}
		AddFiles(filesString, [1]);
	}
	function fwBeforeEndHead(){
		if(!fwPage.scriptyLightbox2){
			var path = this.fwPathName;
			var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
			myFile = new FWFile;
			myFile.fwOpenRead(prefix + 'closebox.png');
			myFile.fwClose();
			fwParameters['closebox'].fwSpecify(myFile);
			var closebox = fwParameters['closebox'].toString();
			fwParameters['closebox'].fwClear();
			myFile = new FWFile;
			myFile.fwOpenRead(prefix + 'ajaxload-reverse.gif');
			myFile.fwClose();
			fwParameters['ajaxload'].fwSpecify(myFile);
			var ajaxload = fwParameters['ajaxload'].toString();
			fwParameters['ajaxload'].fwClear();
			var myhead = fwDocument.fwTags.fwFind("head");
			if (myhead){
				var cssStyles = myhead.fwAddCSSStyles();
				cssStyles.fwAddRaw(fwMarkups['overlay_style'].toString().replace(/_closebox_/,closebox).replace(/_ajaxload_/,ajaxload));
			}
			AddObserver(fwDocument.fwTags.fwFind("head"), fwMarkups['overlay'], 'document','dom:loaded');
			fwPage['scriptyLightbox2'] = true;
		}
	}
	function fwBeforeEndBody(){
		var myItem = fwDocument.fwTags.fwFind(fwItem, "img");
		if(myItem){
			if(fwParameters.original && fwParameters.original.fwHasFile || fwParameters.original_page && fwParameters.original_page.fwValue){
				var link = myItem.fwFindEnclosing('a');
				var relText = [];
				if(!link){
					link = myItem.fwAddEnclosing('a',true);
				}
				var original = (fwParameters.original.fwHasFile ? fwParameters.original : fwParameters.original_page);
				link['href'] = fwQuote(original.toString());
				if(parseInt(fwParameters.width.fwValue,10) > 0 && parseInt(fwParameters.height.fwValue,10) > 0){
					relText.push( fwParameters.width.fwValue.toString() + 'x' + fwParameters.height.fwValue.toString() );
				}
				if(fwParameters['autoplay'].fwBoolValue){
					relText.push( 'autoplay:true' );
				}
				link['rel'] = fwQuote(relText.join('; '));
				addClassName(link,'popup');
			}
		}
	}
</action-javascript>
</item-action>



<action name="ScriptyLightbox2" preview-text="&Text;" generates-link height=12>
<action-version version="0.7.2">
ScriptyLightbox2 Action
Copyright (c) Walter Davis Studio 2011
</action-version>
<action-file name ="prototype1700packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="prototype1602packer" var/>
<action-file name ="closebox" var/>
<action-file name ="ajaxload" var/>
<action-text name="Text" script default="link text"/>
<action-checkbox name="pages" title="Use Page/URL as Target" default="no" />
<action-file name = "original" title="Original File" />
<action-url name = "original_page" title="Page/URL" />
<action-checkbox name="autoplay" title="Auto-Play" default="no" advance="no" />
<action-number name = "width" title="Width" />
<action-number name = "height" title="Height" />
<action-markup custom name="overlay_style">.overlay {
	position: absolute;
	top: 0;
	left: 0;
	z-index: 1000;
	border: none;
	-webkit-box-shadow: 0px 2px 20px #000;
	-moz-box-shadow: 0px 2px 20px #000;
	box-shadow: 0px 2px 20px #000;
	-moz-border-radius: 13px;
	-webkit-border-radius: 13px;
	border-radius: 13px;
	padding: 16px;
	background: #000 url(_ajaxload_) no-repeat center center;
}
.overlay p {
	text-align: center;
	vertical-align: center;
	height:100%;
	padding:0;
	margin:0;
}
.overlay iframe {
	border: none;
	height: 100%;
	width: 100%;
	padding: 0;
	margin: 0;
}
#_closer {
	display: block;
	position: absolute;
	top: -12px;
	left: -12px;
	width: 30px;
	height: 30px;
	cursor: pointer;
	background-image: url(_closebox_);
}
img.popup {
	max-width: 100%;
	max-height: 100%
}
</action-markup>
<action-markup custom name="overlay">//read the dimensions out of the filename string
function read_geometry(str){
	var out = {'width':640,'height':480};
	if(str.length > 3 && str.include('x')){
		var parts = str.match(/\d{1,4}x\d{1,4}/);
		if(parts.length > 0){
			var dims = parts[0].split(/x/);
			if(dims[0] && dims[1]){
				out.width = parseInt(dims[0],10);
				out.height = parseInt(dims[1],10);
			}
		}
	}
	return out
}
function read_autoplay(str){
	var out = 'false';
	if(str.length > 3 && str.include('autoplay')){
		var parts = str.match(/autoplay:(true|false)/);
		if(parts.length > 0){
			return parts[1];
		}
	}
	return out
}
Element.addMethods({
	resizeToOverlay: function(element){
		var element = $(element);
		var width = element.getWidth();
		var height = element.getHeight();
		var ratio = Math.round((parseInt(width,10) / parseInt(height,10)) * 100) / 100;
		var screen = document.viewport.getDimensions();
		var screen_ratio = Math.round((parseInt(screen.width,10) / parseInt(screen.height,10)) * 100) / 100;
		if(ratio > screen_ratio){
			//photo is wide format, screen is not so go width-wise first, then set height
			if (width > (screen.width * .8)){
				var new_width = (Math.round(screen.width * .8));
				element.setStyle('width:' + new_width.toString() + 'px; height:' + Math.round(new_width / ratio).toString() + 'px');
			}
		}else{
			//go height-wise first, then set width
			if(element.getHeight() > (screen.height * .8)){
				var new_height = (Math.round(screen.height * .8));
				new_width = Math.round(new_height * ratio);
				element.setStyle('height:' + new_height.toString() + 'px; width:' + new_width.toString() + 'px');
			}
		}
		element.setStyle('top:' + (Math.floor(screen.height - element.getHeight()) / 2 + document.viewport.getScrollOffsets().top).toString() + 'px; left:' + ((Math.floor(screen.width - element.getWidth()) / 2) - $('PageDiv').positionedOffset().left).toString() + 'px;');
		element.setOpacity(1);
	}
});
//center the player in the window
function center_player(){
	var elm = $('_player');
	var view = document.viewport.getDimensions();
	var container = elm.getDimensions();
	elm.setStyle('top:' + (Math.floor(view.height - container.height) / 2 + document.viewport.getScrollOffsets().top).toString() + 'px; left:' + ((Math.floor(view.width - container.width) / 2) - $('PageDiv').positionedOffset().left).toString() + 'px;');
	return Element.setOpacity.delay(0.1,elm,1);
}
//loop through all of the popup links, if any
$$('a.popup').each(function(elm){
	//try to get the dimensions of the movie out of the filename, fall back to 640x480
	if(elm.rel){
		var geometry = read_geometry(elm.rel.toString());
		var autoplay = read_autoplay(elm.rel.toString());
	}else{
		var geometry = {'width':640,'height':480};
		var autoplay = 'false';
	}
	elm.observe('click',function(evt){
		evt.stop();
		if($('_player')) $('_player').remove();
		var player = new Element('div',{
			id:'_player',
			'class':'overlay'
			}
		);
		$('PageDiv').insert(player);
		player.setOpacity(0);
		var extension = elm.href.toString().substr(elm.href.lastIndexOf('.') + 1).split(/[\?#]/)[0].toLowerCase();
		if(geometry && $w('htm html asp php jsp').include(extension)){
			player.setStyle('width:' + (geometry.width) + 'px; height:' + (geometry.height + 16) + 'px;');
			var iframe = new Template('<iframe width="#{width}" height="#{height}" border="0" src="#{src}"></iframe>');
			vars = {'height':(geometry.height), 'width':geometry.width, 'src':elm.href};
			player.update(iframe.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if(geometry && $w('mov m4v mp4').include(extension)){
			player.setStyle('width:' + (geometry.width) + 'px; height:' + (geometry.height + 16) + 'px;');
			var qt = new Template('<p><object width="#{width}" height="#{height}" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab"> <param name="src" value="#{src}"/> <param name="controller" value="true"/> <param name="autoplay" value="#{autoplay}"/> <embed src="#{src}" width="#{width}" height="#{height}" controller="true" scale="tofit" cache="true" autoplay="#{autoplay}" pluginspage="http://www.apple.com/quicktime/download/" /></object></p>');
			vars = {'height':(geometry.height + 16), 'width':geometry.width, 'src':elm.href, 'autoplay' : autoplay};
			player.update(qt.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if(geometry && extension == 'swf'){
			player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
			var swf = new Template('<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="#{width}" height="#{height}" align="middle"><param name="allowScriptAccess" value="sameDomain"/><param name="movie" value="#{src}"/><param name="quality" value="high"/><embed src="#{src}" quality="high" width="#{width}" height="#{height}" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/></object></p>');
			vars = {'height':geometry.height, 'width':geometry.width, 'src':elm.href};
			player.update(swf.evaluate(vars));
			window.setTimeout(center_player,1);
		}
		if($w('jpg jpeg png gif').include(extension)){
			var img = new Template('<p><img src="#{src}" class="popup" alt="#{src}" /></p>');
			player.update(img.evaluate({'src':elm.href}));
			if (!!geometry){
				player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
			}else{
				if(player.down('img')){
					geometry = player.down('img').getDimensions();
					player.setStyle('width:' + geometry.width + 'px; height:' + geometry.height + 'px;');
				}
			}
			Element.resizeToOverlay.delay(0.1,player);
		}
		player.insert({top:'<span id="_closer"></span>'});
	});
});
//close the player when the close box is clicked
document.observe('click',function(evt){
	var elm;
	if( evt.findElement('#_closer') ){
		if($('_player')){
			$('_player').remove();
		}
	}
});
//hide the player on stray touch events (iOS only)
document.observe('touchstart',function(evt){
	if(evt.findElement('#_player') || evt.findElement('a.popup')){
		//ignore
	}else if(evt.findElement('#_closer')){
		if($('_player')){
			$('_player').remove();
		}
	}else{
		if($('_player')){
			$('_player').remove();
		}
	}
});</action-markup>
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function fwInterface(){
		fwPage.libsList = new Object();
		var active = false; 
		if (fwParameters.original.fwHasFile){ 
			var myFile = fwParameters["original"].fwFileName.toString(); 
			active = ( myFile.substr(myFile.lastIndexOf('.') + 1).toLowerCase().match(/(mov|m4v|mp4)/) != null ); 
		}
		fwParameters['autoplay'].fwVisible = active; 
		fwParameters['original'].fwVisible = ! fwParameters['pages'].fwBoolValue
		fwParameters['original_page'].fwVisible = !! fwParameters['pages'].fwBoolValue
	}
	function fwAfterStartHead()
	{
		var filesString = '';
		var scriptyLibs = [];
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			filesString = 'prototype1700packer';
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			filesString = 'prototype1610packer';
		}else{
			filesString = 'prototype1602packer';
		}
		AddFiles(filesString, [1]);
	}
	function fwBeforeEndHead(){
		if(!fwPage.scriptyLightbox2){
			var path = this.fwPathName;
			var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
			myFile = new FWFile;
			myFile.fwOpenRead(prefix + 'closebox.png');
			myFile.fwClose();
			fwParameters['closebox'].fwSpecify(myFile);
			var closebox = fwParameters['closebox'].toString();
			fwParameters['closebox'].fwClear();
			myFile = new FWFile;
			myFile.fwOpenRead(prefix + 'ajaxload-reverse.gif');
			myFile.fwClose();
			fwParameters['ajaxload'].fwSpecify(myFile);
			var ajaxload = fwParameters['ajaxload'].toString();
			fwParameters['ajaxload'].fwClear();
			var myhead = fwDocument.fwTags.fwFind("head");
			if (myhead){
				var cssStyles = myhead.fwAddCSSStyles();
				cssStyles.fwAddRaw(fwMarkups['overlay_style'].toString().replace(/_closebox_/,closebox).replace(/_ajaxload_/,ajaxload));
			}
			AddObserver(fwDocument.fwTags.fwFind("head"), fwMarkups['overlay'], 'document','dom:loaded');
			fwPage['scriptyLightbox2'] = true;
		}
	}
	function fwBeforeEndBody(){
		var myItem = fwDocument.fwTags.fwFind("",fwItem);
		if(myItem){
			if(fwParameters.original && fwParameters.original.fwHasFile || fwParameters.original_page && fwParameters.original_page.fwValue){
				var relText = [];
				var link = myItem.fwFindEnclosing('a');
				if(!link){
					link = myItem.fwFind("a", fwItem);
				}
				if(!link){
					link = myItem.fwAddEnclosing('a',true);
				}
				var original = (fwParameters.original.fwHasFile ? fwParameters.original : fwParameters.original_page);
				link['href'] = fwQuote(original.toString());
				if(parseInt(fwParameters.width.fwValue,10) > 0 && parseInt(fwParameters.height.fwValue,10) > 0){
					relText.push( fwParameters.width.fwValue.toString() + 'x' + fwParameters.height.fwValue.toString() );
				}
				if(fwParameters['autoplay'].fwBoolValue){
					relText.push( 'autoplay:true' );
				}
				link['rel'] = fwQuote(relText.join('; '));
				link.fwAddRaw(fwEncode(fwParameters.Text, fwPage));
				addClassName(link,'popup');
			}
		}
	}
</action-javascript>
</action>