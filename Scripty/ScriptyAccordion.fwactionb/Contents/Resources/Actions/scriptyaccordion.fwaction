<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	//set this to true in order to load the un-packed versions of the libraries
	var debug = false;
	function in_array(theArray,search_term) {
		var i = theArray.length;
		if (i > 0) {
			do {
				if (theArray[i] === search_term) {
					return true;
				}
			} while (i--);
		}
		return false;
	}
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	String.prototype.strip = function() {
		return this.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	var hasClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
		return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
	};

	var addClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		if (!hasClassName(element,className)){
			var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
			var out = (elementClassName + ' ' + className).strip();
			return element["class"] = fwQuote(out);
		}
	};

	var removeClassName = function(element, className) {
		var className = fwQuote(className,'','"');//"
		var elementClassName = (element['class']) ? fwQuote(element['class'],'','"') : '';//"
		elementClassName = elementClassName.replace(
			new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').replace(/(^\s+|\s+$)/g,'');
		return element['class'] = fwQuote(elementClassName);
	};
	
	function GetPageDiv(){
		var divs = fwDocument.fwTags.fwFindAll('div');
		for (i in divs){
			if (divs[i] && divs[i].id && divs[i].id.toString().indexOf('PageDiv') > -1) return divs[i];
		}
		return false;
	}

	function AddLibraryScript(theTag, theLibraryName)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}

	function AddEventObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('Event.observe(');
		if(theObject != 'window') theObject = fwQuote(theObject,"'");
		scriptTag.fwAddRaw(theObject + ', ');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	var gLibraries = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
	
	// Clean up the list of libraries by sorting them in their correct order (according to scripty specs) and removing dupes
	function cleanLibs()
	{
		fwPage.scriptyLibs.sort();
		// Get rid of duplicates and out of range values
		var i = 0;
		while(i < fwPage.scriptyLibs.length)
			if(fwPage.scriptyLibs[i+1] && fwPage.scriptyLibs[i] == fwPage.scriptyLibs[i+1])
				fwPage.scriptyLibs.splice(i+1, 1);
			else if(fwPage.scriptyLibs[i] > gLibraries.length-1 || fwPage.scriptyLibs[i] < 0)
				fwPage.scriptyLibs.splice(i, 1);
			else
				i++;
	}
	
	// Build a string containing the scripty libraries used, or return "" if all are used or none are specified
	function getLibs()
	{
		var scriptyLibs = "";
		if(fwPage.scriptyLibs)
		{
			if(fwPage.scriptyLibs.length == gLibraries.length)
			{
				// All scriptyLibs are being used so don't specify any
			}	
			else
			{
				scriptyLibs += "?load=";
				for(var i in fwPage.scriptyLibs)
					scriptyLibs += gLibraries[fwPage.scriptyLibs[i]] + ",";
				scriptyLibs = scriptyLibs.substring(0, scriptyLibs.length-1);
			}
		}
		return scriptyLibs;
	}

	function LinkFileToHead(theTag, file){
		// Get the list of individual scriptyLibs and add it to the end of the scripty reference
		var scriptyLibs = getLibs();
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote((!file.match("scriptaculous") ? file : file+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		// Get the list of individual scriptyLibs and add to the end of the scripty reference
		var scriptyLibs = getLibs();
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.7.0.0/prototype.js" : "scriptaculous/1.9.0/scriptaculous.js"+scriptyLibs));
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"+scriptyLibs));
		}else{
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.0.2/prototype.js" : "scriptaculous/1.8.1/scriptaculous.js"+scriptyLibs));
		}
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}

	function AddFiles(filesString, scriptyLibs /*number or array of numbers*/){
		// Cleanup if arguments are missing
		if(filesString.constructor == Number || filesString.constructor == Array)	{
			scriptyLibs = filesString;
			fileString = "";
		}
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = function(){
			if(fwShellCommand){
				return fwShellCommand('ping -c1 -i1 http://ajax.googleapis.com');
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('do shell script "curl ajax.googleapis.com"'); 
				osa.fwCompile(); 
				return osa.fwRun();
			}
		}
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var canon = 'prototype1700packer,prototype1700,scriptaculous190packer,scriptaculous190'.split(',');
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		}else{
			var canon = 'prototype1602packer,prototype1602,scriptaculous181packer,scriptaculous181'.split(',');
		}
		var files = (useCustom) ? filesString.split(',') : canon;

		if(scriptyLibs){
			// Make the scriptyLibs argument an array if it isn't one already
			scriptyLibs = scriptyLibs.constructor == Array ? scriptyLibs : [scriptyLibs];
			// Create or add the libraries used to a page variable
			if(!fwPage.scriptyLibs)
			fwPage.scriptyLibs = scriptyLibs;
			else
			fwPage.scriptyLibs = fwPage.scriptyLibs.concat(scriptyLibs);
		}

		// Make the overall library list object variable if it doesn't exist
		if(!fwPage.libsList)
		fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file]){
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file]){
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
					fwPage.libsList[file] = path;
					fwParameters[file].fwClear();
				}else{
					fwAlert(ParamString(kFileNotFound, file, ".js"));
				}
			}
		}

		if(lastOrders()){
			if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
				if(fwPage.libsList['prototype1700packer'] && fwPage.libsList['prototype1700'])
					fwPage.libsList['prototype1700packer'] = null;
				if(fwPage.libsList['scriptaculous190packer'] && fwPage.libsList['scriptaculous190'])
					fwPage.libsList['scriptaculous190packer'] = null;
			}else if(parseFloat(fwFreewayVersion) >= 5.5){
				if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
					fwPage.libsList['prototype1610packer'] = null;
				if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
					fwPage.libsList['scriptaculous183packer'] = null;
			}else{
				if(fwPage.libsList['prototype1602packer'] && fwPage.libsList['prototype1602'])
					fwPage.libsList['prototype1602packer'] = null;
				if(fwPage.libsList['scriptaculous181packer'] && fwPage.libsList['scriptaculous181'])
					fwPage.libsList['scriptaculous181packer'] = null;
			}

			// Clean the list of individual libs
			if(fwPage.scriptyLibs) cleanLibs();

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected() ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}
		
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	} 



</action-javascript>
</library-action>

<item-action name="ScriptyAccordion">
<action-version version="0.8.2">
ScriptyAccordion Action
Walter Davis Studio 2008, 2009, 2010, 2011
</action-version>
<action-appliesto non-html32/>
<action-file name ="prototype1700packer" var/>
<action-file name ="scriptaculous190packer" var/>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1602packer" var/>
<action-file name ="scriptaculous181packer" var/>
<action-popup name="event" title="Trigger Event">
<value name="mouseover">
<value name="click">
</action-popup>
<action-popup name="triggerElm" title="Trigger Elements"/>
<action-popup name="toggleElm" title="Show/Hide Elements"/>
<action-popup name = "show" title = "Show Element open when page loads">
	<value name = "None" value = "none">
	<value name = "1" value = "0">
	<value name = "2" value = "1">
	<value name = "3" value = "2">
	<value name = "4" value = "3">
	<value name = "5" value = "4">
	<value name = "6" value = "5">
	<value name = "7" value = "6">
	<value name = "8" value = "7">
	<value name = "9" value = "8">
</action-popup>
<action-checkbox name="exclusive" title="Show only one element at a time" />
<action-checkbox name="hz" title="Animate horizontally" default=no />
<action-markup custom name="hz_support">
Effect.BlindLeft = function(element) {
  element = $(element);
  element.makeClipping();
  return new Effect.Scale(element, 0,
    Object.extend({ scaleContent: false,
      scaleY: false,
      scaleMode: 'box',
      scaleContent: false,
      restoreAfterFinish: true,
      afterSetup: function(effect) {
        effect.element.makeClipping().setStyle({
          height: effect.dims[0] + 'px'
        }).show();
      },
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping();
      }
    }, arguments[1] || { })
  );
};
Effect.BlindRight = function(element) {
  element = $(element);
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleY: false,
    scaleFrom: 0,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makeClipping().setStyle({
        width: '0px',
        height: effect.dims[0] + 'px'
      }).show();
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping();
    }
  }, arguments[1] || { }));
};
</action-markup>
<action-markup custom name="toggleScript">
	var box = $('__this__').up();
	var test_me = '__trigger__';
	if('__trigger__' == 'img'){
		var heads = box.select('#__this__ > p > img');
	}else{
		var heads = box.select('#__this__ > __trigger__');
	}
	if('__trigger__' == 'img'){
		heads = heads.collect(function(elm){ return elm.up('p'); });
		test_me = 'p';
	}
	if(heads.size() < 1) heads = box.select('#__this__ > __trigger__');
	var bods = box.select('#__this__ > __toggle__');
	bods = bods.findAll(function(elm){return heads.include(elm) == false;});
	var tog = function(){
		var params = {duration:0.2,queue:'end'};
		var me = this;
		if (this.next('__toggle__') && (this.next('__toggle__').previous(test_me) == me) && !this.next('__toggle__').visible()) {
			bods.findAll(function(elm){return elm.visible() && elm.previous(test_me) !== me}).each(function(elm){Effect.BlindUp(elm,params)});
			Effect.BlindDown(this.next('__toggle__'),params);
		}else{
			if(this.up().next('__toggle__') && (this.up().next('__toggle__').previous(test_me) == me) && ! this.up().next('__toggle__').visible()){
				bods.findAll(function(elm){return elm.visible() && elm.previous(test_me) !== me}).each(function(elm){Effect.BlindUp(elm,params)});
				Effect.BlindDown(this.up().next('__toggle__'),params);
			}
		}
	};
	bods.invoke('hide');
	__show__
	heads.invoke('observe','__event__',tog);
	heads.invoke('setStyle',{cursor:'pointer'});
</action-markup>
<action-markup custom name="individualScript">
	var box = $('__this__').up();
	var test_me = '__trigger__';
	if('__trigger__' == 'img'){
		var heads = box.select('#__this__ > p > img');
	}else{
		var heads = box.select('#__this__ > __trigger__');
	}
	if('__trigger__' == 'img'){
		heads = heads.collect(function(elm){ return elm.up('p'); });
		test_me = 'p';
	}
	if(heads.size() < 1) heads = box.select('#__this__ > __trigger__');
	var bods = box.select('#__this__ > __toggle__');
	bods = bods.findAll(function(elm){return heads.include(elm) == false;});
	var tog = function(){
		var params = {duration:0.2};
		var me = this;
		if (this.next('__toggle__') && (this.next('__toggle__').previous(test_me) == me)) {
			Effect.toggle(this.next('__toggle__'),'blind',params);
		}else{
			if(this.up().next('__toggle__') && (this.up().next('__toggle__').previous(test_me) == me)){
				Effect.toggle(this.up().next('__toggle__'),'blind',params);
			}
		}
	};
	bods.invoke('hide');
	__show__
	heads.invoke('observe','__event__',tog);
	heads.invoke('setStyle',{cursor:'pointer'});
</action-markup>

<action-javascript>
<action-include name="scriptyHandlerFunctions">
	
	var triggers = "h2 h3 h4 h5 h6 p div li img".split(' ');
	var toggles = "p div ul ol li".split(' ');
	function fwInterface(){
		fwPage.libsList = new Object();
		var myTriggers = triggers.slice();
		var myToggles = toggles.slice();
		fwParameters.hz.fwVisible = fwParameters.exclusive.fwBoolValue;
		fwParameters.triggerElm.fwMenuItems = myTriggers;
		fwParameters.toggleElm.fwMenuItems = myToggles;
		if(fwParameters.triggerElm.fwValue == fwParameters.toggleElm.fwValue){
			var comp = fwParameters.triggerElm.fwValue.toString();
			for(i = 0; i < myToggles.length; i++){
				if(myToggles[i] === comp){
					myToggles.splice(i,1);
				}
			}
			fwParameters.toggleElm.fwMenuItems = myToggles;
		}
	}
	function fwParameterChanged(newParam,oldParam){
		return fwInterface();
	}

	function fwAfterStartHead()
	{
		if(parseInt(fwFreewayVersion.replace(/\.?(\w\d)?/g, "")) >= 562){
			var filesString = 'prototype1700packer,scriptaculous190packer';
		}else if(parseFloat(fwFreewayVersion) >= 5.5){
			var filesString = 'prototype1610packer,scriptaculous183packer';
		}else{
			var filesString = 'prototype1602packer,scriptaculous181packer';
		}
		AddFiles(filesString, [1]);
	}
	
	function fwBeforeEndBody(){
		var showElement = fwParameters['show'].toString();
		var theHead = fwDocument.fwTags.fwFind("head");
		var myself = fwItem.toString();
		var toggle = fwParameters['toggleElm'].fwValue || toggles[0];
		var trigger = fwParameters['triggerElm'].fwValue || triggers[0];
		var event = fwParameters['event'].fwValue;
		var observerScript = (fwParameters['exclusive'].fwBoolValue) ? fwMarkups['toggleScript'] : fwMarkups['individualScript'];
		observerScript = observerScript.toString().replace(/__this__/g,myself).replace(/__trigger__/g,trigger).replace(/__toggle__/g,toggle).replace(/__event__/g,event);;
		observerScript = (showElement != "none") ? observerScript.toString().replace(/__show__/,'bods['+showElement+'].show();') : observerScript.toString().replace(/__show__/,'');
		var scriptTag = theHead.fwAddJavaScript();
		if (fwParameters['hz'].fwBoolValue){
			var hz = fwMarkups['hz_support'].toString();
			hz.fwConvertLineEndings = true;
			scriptTag.fwAddRaw(hz);
			scriptTag.fwAddRawln('');
			observerScript = observerScript.toString().replace(/BlindDown/g,'BlindRight').replace(/BlindUp/g,'BlindLeft');
			var thisItem = fwDocument.fwTags.fwFind(fwItem);
			var inlines = thisItem.fwFindAll(['div','img']);
			for (i in inlines){
				var inline = inlines[i];
				SetCSSAttribute(inline,'float','left');
				SetCSSAttribute(inline,'vertical-align','top');
				if(inline.fwFindEnclosing('p')){
					var p = inline.fwFindEnclosing('p');
					var d = p.fwAddEnclosing('',false);
					var c = p.fwFindAllContent();
					d.fwMove(c);
					p.fwDelete();
				}
			}
		}
		observerScript.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('document.observe(');
		scriptTag.fwAddRaw("'dom:loaded', ");
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(observerScript);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
	}
	
</action-javascript>
</item-action>
