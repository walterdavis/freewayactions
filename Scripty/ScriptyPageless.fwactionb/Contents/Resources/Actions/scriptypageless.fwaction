<library-action name="scriptyHandlerFunctions">
<action-javascript>
	//mandatory -- set this to true in any action that uses the prototype/scriptaculous stack
	var scripty = true;
	//set this to true in order to load the un-packed versions of the libraries
	var debug = false;
	function in_array(theArray,search_term) {
		var i = theArray.length;
		if (i > 0) {
			do {
				if (theArray[i] === search_term) {
					return true;
				}
			} while (i--);
		}
		return false;
	}
	function checkForUpdates(actionId,actionVersion){
	//example: action-button name="checkUpdates" label="Check for Updates" onClick=checkForUpdates(1,1.4)
		if(fwLaunchURL) {
			fwLaunchURL('http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion);
		}else{
			var osa=new FWOSAInterpreter; 
			osa.fwWrite('open location "http://actionsforge.com/actions/' + actionId + '/version/' + actionVersion + '"'); 
			osa.fwCompile(); 
			osa.fwRun(); 
		}
	}
	String.prototype.strip = function() {
		return this.replace(/^\s+/, '').replace(/\s+$/, '');
	}

	var hasClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
		return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
	};

	var addClassName = function(element, className) {
		className = fwQuote(className,'','"'); //"
		if (!hasClassName(element,className)){
			var elementClassName = (element["class"]) ? fwQuote(element["class"],'','"') : ''; //"
			var out = (elementClassName + ' ' + className).strip();
			return element["class"] = fwQuote(out);
		}
	};

	var removeClassName = function(element, className) {
		var className = fwQuote(className,'','"');//"
		var elementClassName = (element['class']) ? fwQuote(element['class'],'','"') : '';//"
		elementClassName = elementClassName.replace(
			new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
		return element['class'] = (elementClassName.length > 0) ? fwQuote(elementClassName) : null;
	};
	
	function GetPageDiv(){
		var divs = fwDocument.fwTags.fwFindAll('div');
		for (i in divs){
			if (divs[i] && divs[i].id && divs[i].id.toString().indexOf('PageDiv') > -1) return divs[i];
		}
		return false;
	}

	function AddLibraryScript(theTag, theLibraryName)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwMarkups[theLibraryName];
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw(theMarkup);
		theTag.fwAddRawln('');
	}

	function AddEventObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		scriptTag.fwAddRaw('Event.observe(');
		if(theObject != 'window') theObject = fwQuote(theObject,"'");
		scriptTag.fwAddRaw(theObject + ', ');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function AddObserver(theTag, theFunction, theObject, theEvent)
	{
		var scriptTag = theTag.fwAddJavaScript();
		if(theObject != 'document') theObject = '$(' + fwQuote(theObject,"'") +')';
		var theMarkup = fwParameters[theFunction].toString();
		theMarkup.fwConvertLineEndings = true;
		if(theObject != 'document') scriptTag.fwAddRawln("document.observe('dom:loaded',function(){");
		scriptTag.fwAddRaw(theObject + '.observe(');
		scriptTag.fwAddRaw(fwQuote(theEvent,"'") + ', ');
		scriptTag.fwAddRawln('function(evt){');
		scriptTag.fwAddRaw(theMarkup);
		scriptTag.fwAddRawln('');
		scriptTag.fwAddRawln('});');
		if(theObject != 'document') scriptTag.fwAddRawln('});');
		theTag.fwAddRawln('');
	}

	function lastOrders(){
		var actions = fwPage.fwFindAllActions();
		var scripties = new Array();
		for (i in actions){
			if (actions[i].scripty == true) scripties.push(actions[i]);
		}
		return this === scripties[scripties.length -1];
	}

	var gLibraries = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
	
	// Clean up the list of libraries by sorting them in their correct order (according to scripty specs) and removing dupes
	function cleanLibs()
	{
		fwPage.scriptyLibs.sort();
		// Get rid of duplicates and out of range values
		var i = 0;
		while(i < fwPage.scriptyLibs.length)
			if(fwPage.scriptyLibs[i+1] && fwPage.scriptyLibs[i] == fwPage.scriptyLibs[i+1])
				fwPage.scriptyLibs.splice(i+1, 1);
			else if(fwPage.scriptyLibs[i] > gLibraries.length-1 || fwPage.scriptyLibs[i] < 0)
				fwPage.scriptyLibs.splice(i, 1);
			else
				i++;
	}
	
	// Build a string containing the scripty libraries used, or return "" if all are used or none are specified
	function getLibs()
	{
		var scriptyLibs = "";
		if(fwPage.scriptyLibs)
		{
			if(fwPage.scriptyLibs.length == gLibraries.length)
			{
				// All scriptyLibs are being used so don't specify any
			}	
			else
			{
				scriptyLibs += "?load=";
				for(var i in fwPage.scriptyLibs)
					scriptyLibs += gLibraries[fwPage.scriptyLibs[i]] + ",";
				scriptyLibs = scriptyLibs.substring(0, scriptyLibs.length-1);
			}
		}
		return scriptyLibs;
	}

	function LinkFileToHead(theTag, file){
		// Get the list of individual scriptyLibs and add it to the end of the scripty reference
		var scriptyLibs = getLibs();
		var scriptTag = theTag.fwAdd("script", true);
		scriptTag.src = fwQuote((!file.match("scriptaculous") ? file : file+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function LinkRemoteFileToHead(theTag, file){
		var path = "http://ajax.googleapis.com/ajax/libs/"
		var scriptTag = theTag.fwAdd("script", true);
		// Get the list of individual scriptyLibs and add to the end of the scripty reference
		var scriptyLibs = getLibs();
		if(parseFloat(fwFreewayVersion) >= 5.5)
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.1.0/prototype.js" : "scriptaculous/1.8.3/scriptaculous.js"+scriptyLibs));
		else
			scriptTag.src = fwQuote(path + (file.match("pro") ? "prototype/1.6.0.2/prototype.js" : "scriptaculous/1.8.1/scriptaculous.js"+scriptyLibs));
		scriptTag.type = fwQuote("text/javascript");
		scriptTag.fwAddRawOpt();
		theTag.fwAddRawOpt();
	}
	
	function AddFiles(filesString, scriptyLibs /*number or array of numbers*/){
		// Cleanup if arguments are missing
		if(filesString.constructor == Number || filesString.constructor == Array)
		{
			scriptyLibs = filesString;
			filesString = "";
		}
		var theHead = fwDocument.fwTags.fwFind("head");
		var connected = (function(){
			if(fwShellCommand) {
				return fwShellCommand('ping -t3 -o ajax.googleapis.com').match("1 packets received");
			}else{
				var osa=new FWOSAInterpreter; 
				osa.fwWrite('try\n' + 
				'do shell script "ping -t3 -o ajax.googleapis.com"\n' +
				'return 1\n' +
					'on error\n' +
					'return 0\n' +
					'end try');
				osa.fwCompile(); 
				return osa.fwRun();
			}
		})();
		var useCustom = filesString && filesString.length > 0;
		var path = this.fwPathName;
		var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
		if(parseFloat(fwFreewayVersion) >= 5.5)
			var canon = 'prototype1610packer,prototype1610,scriptaculous183packer,scriptaculous183'.split(',');
		else
			var canon = 'prototype1602packer,prototype1602,scriptaculous181packer,scriptaculous181'.split(',');
	
		var files = (useCustom) ? filesString.split(',') : canon;
	
		if(scriptyLibs)
		{
			// Make the scriptyLibs argument an array if it isn't one already
			scriptyLibs = scriptyLibs.constructor == Array ? scriptyLibs : [scriptyLibs];
			// Create or add the libraries used to a page variable
			if(!fwPage.scriptyLibs)
				fwPage.scriptyLibs = scriptyLibs;
			else
				fwPage.scriptyLibs = fwPage.scriptyLibs.concat(scriptyLibs);
		}
	
		if(!fwPage.libsList)
			fwPage.libsList = new Object();

		for (i in files){
			var file = files[i];
			if (file && !fwPage.libsList[file])
			{
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + file + '.js');
				myFile.fwClose();
				if (fwParameters[file])
				{
					fwParameters[file].fwSpecify(myFile);
					var path = fwParameters[file].toString();
					if(useCustom == true)
						fwPage.libsList[file] = path;
				}
				else
				{
					alert (file + '.js was not found in the action bundle');
				}
			}
		}

		if(lastOrders()){
			if(parseFloat(fwFreewayVersion) >= 5.5) {
				if(fwPage.libsList['prototype1610packer'] && fwPage.libsList['prototype1610'])
					fwPage.libsList['prototype1610packer'] = null;

				if(fwPage.libsList['scriptaculous183packer'] && fwPage.libsList['scriptaculous183'])
					fwPage.libsList['scriptaculous183packer'] = null;
			} else {
				if(fwPage.libsList['prototype1602packer'] && fwPage.libsList['prototype1602'])
					fwPage.libsList['prototype1602packer'] = null;

				if(fwPage.libsList['scriptaculous181packer'] && fwPage.libsList['scriptaculous181'])
					fwPage.libsList['scriptaculous181packer'] = null;
			}
		
			// Clean the list of individual libs
			if(fwPage.scriptyLibs)
				cleanLibs();

			for (i in canon){
				if (fwPage.libsList[canon[i]]){
					var file = fwPage.libsList[canon[i]];
					connected ? LinkRemoteFileToHead(theHead, file) : LinkFileToHead(theHead, file);
					delete fwPage.libsList[canon[i]];
				}
			}
			for ( i in fwPage.libsList )
				LinkFileToHead(theHead, fwPage.libsList[i]);
		}
	}
	
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	
	function GetWidth(tag){
		//calculates total width of CSS styled element
		// somewhat naive: border * 2 + margin + padding + width
		var width = GetCSSAttribute(tag,'width');
		if(width) {
			width = parseInt(width.toString().replace(/[^\d+]/g,''),10);
		}else{
			width = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			width += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					width += parseInt(padding[1],10);
					width += parseInt(padding[3],10);
					break;
				case 2:
					width += parseInt(padding[1] * 2,10);
					break;
				case 1:
					width += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					width += parseInt(margin[1],10);
					width += parseInt(margin[3],10);
					break;
				case 2:
					width += parseInt(margin[1] * 2,10);
					break;
				case 1:
					width += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return width + 'px';
	}
	
	function GetHeight(tag){
		//calculates total height of CSS styled element
		// somewhat naive: border * 2 + margin + padding + height
		var height = GetCSSAttribute(tag,'height');
		var minHeight = GetCSSAttribute(tag,'min-height');
		if(height){
			height = parseInt(height.toString().replace(/[^\d+]/g,''),10);
		}else if(minHeight){
			height = parseInt(minHeight.toString().replace(/[^\d+]/g,''),10);
		}else{
			height = 0;
		}
		var border = GetCSSAttribute(tag,'border');
		if(border){
			var b = border.match(/\d+px/);
			height += parseInt(b.toString().replace(/[^\d+]/g,'') * 2,10);
		}
		var padding = GetCSSAttribute(tag,'padding');
		if (padding){
			padding = padding.toString().replace(/[^\d ]/g,'').split(' ');
			switch(padding.length){
				case 4:
				case 3:
					height += parseInt(padding[0],10);
					height += parseInt(padding[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(padding[0] * 2,10);
					break;
				default:
				break;
			}
		}
		var margin = GetCSSAttribute(tag,'margin');
		if (margin){
			margin = margin.toString().replace(/[^\d ]/g,'').split(' ');
			switch(margin.length){
				case 4:
				case 3:
					height += parseInt(margin[0],10);
					height += parseInt(margin[2],10);
					break;
				case 2:
				case 1:
					height += parseInt(margin[0] * 2,10);
					break;
				default:
				break;
			}
		}
		return height + 'px';
	}

</action-javascript>
</library-action>

<item-action name="ScriptyPageless">
<action-appliesto non-html32/>
<action-version version="0.1">
ScriptyPageless
Action (c)2011 Walter Lee Davis.

Apply the action to an HTML item to mark the location of a fading group of page elements.

</action-version>
<action-markup custom name="fader">document.observe('dom:loaded',function(){
	var thumbs = $$('.SFthumb');
	var mains = $$('.SFmain');
	thumbs.each(function(elm){
		elm.down('img').setOpacity(0.4);
		elm.observe('mouseover', function(evt){
			elm.down('img').morph('opacity:1',{duration:0.3});
		});
		elm.observe('mouseout', function(evt){
			if(!elm.hasClassName('active')) elm.down('img').morph('opacity:0.4',{duration:0.3});
		});
		elm.observe('click',function(evt){
			evt.stop();
			elm.addClassName('active').down('img').setStyle('opacity:1');
			var main = $(elm.readAttribute('rel'))
			if(main.pe) main.pe.stop();
			if(history && history.pushState){
				history.pushState(null,window.title,window.location.href.split(/#/).first() + '#' + elm.href.split(/#/).last());
			}else{
				window.location.hash = '#' + elm.href.split(/#/).last();
			}
			setSelection(elm);
		});
	});
	mains.each(function(main){
		main.update();
		var clone = new Element('div',{'id':'clone_' + main.readAttribute('id')});
		clone.writeAttribute('style', main.readAttribute('style'));
		clone.setStyle({zIndex:main.getStyle('z-index') -1}).hide();
		main.insert({after: clone});
		if($$('a[rel~="' + main.id + '"]').length > 0){
			main['initialSelection'] = $$('a[rel~="' + main.id + '"]').first();
			main.initialSelection.addClassName('active')
			main.initialSelection.down('img').setOpacity(1);
		}else{
			main['initialSelection'] = sFoptions.get(main.id.slice(0,-6)).first();
		}
		main['autofade'] = 0;
		if(main.hasClassName('autofade')){
			var classes = $w(main.readAttribute('class'));
			main.autofade = parseFloat(classes.find(function(c){ return c.slice(0,5) == 'fade_'; }).slice(5).replace('-','.'),10);
		}
		if(window.location.hash && window.location.hash.length > 1 && thumbs.pluck('href').map(function(elm){ return '#' + elm.split('#').last()}).include(window.location.hash)){
			main.initialSelection = thumbs.find(function(elm){ return '#' + elm.href.split('#').last() == window.location.hash; });
			setSelection(main.initialSelection);
		}else if(main.autofade > 0){
			if(main.initialSelection.href){
				new Ajax.Updater(main,'_' + main.initialSelection.href.split('#').last() + '.html',{method:'get'});
			}else{
				new Ajax.Updater(main,'_' + main.initialSelection + '.html',{method:'get'});
			}
			var idx = 0;
			main['family'] = $$('a[rel~="' + main.id + '"]').each(function(elm){elm['idx'] = ++idx});
			if(main.family.length < sFoptions.get(main.id.slice(0,-6)).length){
				main['pe'] = new PeriodicalExecuter(function(){
					var next;
					var optionsArray = sFoptions.get(main.id.slice(0,-6));
					if (next = optionsArray.find(function(elm){ return optionsArray.indexOf(elm) > optionsArray.indexOf(main.initialSelection); })){
						main.initialSelection = next;
					}else{
						main.initialSelection = optionsArray.first();
					}
					loadOption(main.initialSelection,main.id);
				},main.autofade);
			}else{
				main['pe'] = new PeriodicalExecuter(function(){
					var next;
					if (next = main.family.find(function(elm){ return elm.idx > main.initialSelection.idx; })){
						main.initialSelection = next;
					}else{
						main.initialSelection = main.family.first();
					}
					setSelection(main.initialSelection);
				},main.autofade);
			}
			main.observe('click', function(evt){ main.pe.stop(); });
		}else{
			new Ajax.Updater(main,'_' + main.initialSelection.href.split('#').last() + '.html',{method:'get'});
		}
	});
	function setSelection(elm){
		var group = elm.readAttribute('rel');
		var main = $(group);
		var clone = $('clone_' + group);
		$$('.' + group).reject(function(el){return el == elm;}).each(function(el){ el.removeClassName('active').down('img').morph('opacity:0.4'); });
		elm.addClassName('active').down('img').setStyle('opacity:1');
		loadOption(elm.href.split('#').last(),group);
	}
	function loadOption(choice,container){
		var main = $(container).addClassName('loadingIndicator');
		var clone = $('clone_' + container);
		new Ajax.Updater(clone,'_' + choice + '.html' ,{
			method:'get',
			onComplete: function(){
				Effect.Appear(clone, {queue: { position: 'start', scope: container, limit: 2 }});
				Effect.Fade(main,{
					queue: { position: 'start', scope: container, limit: 2 },
					afterFinish: function(){
						main.update(clone.innerHTML);
						main.setOpacity(1).show().removeClassName('loadingIndicator');
						clone.hide().update();
					}
				});
			}
		});
	}
	Event.observe(window,'popstate', function(evt){
		if(window.location.hash && window.location.hash.length > 1){
			var initialSelection = thumbs.find(function(elm){ return '#' + elm.href.split('#').last() == window.location.hash; });
		}else{
			var initialSelection = thumbs.first().addClassName('active').down('img').setOpacity(0);
		}
		setSelection(initialSelection);
	});
});
</action-markup>
<action-file name ="prototype1610packer" var/>
<action-file name ="scriptaculous183packer" var/>
<action-file name ="prototype1602packer" var/>
<action-file name ="scriptaculous181packer" var/>
<action-file name ="ajaxwait" var/>
<action-file name ="partial" var keepwithhtml/>
<action-number name="autofade" title="Auto-Fade Interval" default=0>
<action-checkbox name="spinner" title="Show Spinner" default=yes />
<action-javascript>
<action-include name="scriptyHandlerFunctions">
	function getPosition(item){
		if(!item['_top']) item['_top'] = item.fwTop;
		if(!item['_left']) item['_left'] = item.fwLeft;
		if(item.fwParent){
			var p = item.fwParent;
			if(p.toString().indexOf("PageDiv") < 0){
				p['_top'] = item._top + p.fwTop;
				p['_left'] = item._left + p.fwLeft;
				return getPosition(p);
			}
		}
		return [item._top,item._left];
	}
	function clonePosition(target,source){
		pos = ['top','left','bottom','right','z-index','position'];
		if(source && source.style){
			for(var i = 0; i < pos.length; i++){
				if(GetCSSAttribute(source,pos[i])){
					SetCSSAttribute(target,pos[i],GetCSSAttribute(source,pos[i]));
				}
			}
			if(GetCSSAttribute(source,'height'))
				SetCSSAttribute(target,'height',GetHeight(source));
			if(GetCSSAttribute(source,'width'))
				SetCSSAttribute(target,'width',GetWidth(source));
		}
		
	}
	function removePositioning(target){
		pos = ['top','left','bottom','right','z-index'];
		for(var i = 0; i < pos.length; i++){
			if(GetCSSAttribute(target,pos[i])){
				SetCSSAttribute(target,pos[i],null);
			}
		}
		SetCSSAttribute(target,'position','relative');
	}
	
	function makePartial(myName,textStream){
		textStream.fwConvertLineEndings = true;
		textStream = fwEncode(textStream);
		outFile = new FWFile;
		if (outFile.fwOpenWrite('_' + myName + '.html',true,"TEXT","R*ch")){
			outFile.fwWrite(textStream);
			outFile.fwClose();
			fwParameters['partial'].fwSpecify(outFile);
			var partial = fwParameters['partial'].toString();
			return partial.substring(1,partial.indexOf('.'));
		}		
		fwParameters['partial'].fwClear();
		return null;
	}
	
	function fwAfterStartHead(){
		if(parseFloat(fwFreewayVersion) >= 5.5){
			AddFiles('prototype1610packer,scriptaculous183packer', [1]);
		}else{
			AddFiles('prototype1602packer,scriptaculous181packer', [1]);
		}
	}
	function fwBeforeEndHead(){
		var myHead = fwDocument.fwTags.fwFind("head");
		if (myHead && !fwPage.SFhead){
			var myScript = myHead.fwAddJavaScript();
			myScript.fwAddRawln("var sFoptions = $H();");
			fwPage['SFhead'] = true;
		}
	}
	function fwAfterEndHTML(){
		var originalHeight, originalWidth
		var thisItem = fwDocument.fwTags.fwFind("div", fwItem);
		if (thisItem){
			var spot = thisItem.fwAddEnclosing("div",true);
			spot.id = fwQuote(thisItem.id.toString().slice(1,-1) + '_fader');
			clonePosition(spot,thisItem);
			SetCSSAttribute(spot,'border',null);
			SetCSSAttribute(spot,'margin',null);
			SetCSSAttribute(spot,'padding',null);
			SetCSSAttribute(spot,'height',GetHeight(thisItem));
			SetCSSAttribute(spot,'width',GetWidth(thisItem));
			addClassName(spot,'SFmain');
			if(fwParameters['autofade'].fwValue > 0){
				addClassName(spot,'autofade');
				addClassName(spot,'fade_' + fwParameters['autofade'].fwValue.toString().replace(/\./,'-'));
			}
			removePositioning(thisItem);
			var code = thisItem.fwToHTML();
			makePartial(thisItem.id.toString().slice(1,-1),code);
			thisItem.fwDelete();
			if(fwParameters.spinner.fwBoolValue){
				var path = this.fwPathName;
				var prefix = path.substring(0, path.lastIndexOf(":")) + ':Support Files~:';
				myFile = new FWFile;
				myFile.fwOpenRead(prefix + 'ajaxwait.gif');
				myFile.fwClose();
				fwParameters['ajaxwait'].fwSpecify(myFile);
				var ajaxwait = fwParameters['ajaxwait'].toString();
			}
			if(!fwPage.SFspinner){
				fwPage['SFspinner'] = true;
				var myHead = fwDocument.fwTags.fwFind("head");
				if (myHead){
					if(fwParameters.spinner.fwBoolValue){
						var myStyle = myHead.fwAddCSSStyles();
						myStyle.fwAddRawln('.loadingIndicator { background: url(' + ajaxwait + ') center center no-repeat; }');
					}
					var myScript = myHead.fwAddJavaScript();
					var theMarkup = fwMarkups['fader'];
					theMarkup = theMarkup.toString();
					//theMarkup = theMarkup.replace(/__spinner__/,ajaxwait);
					theMarkup.fwConvertLineEndings = true;
					myScript.fwAddRaw(theMarkup);
					myHead.fwAddRawln('');
				}
			}
		}
	}
	function fwAfterStartBody(){
		var options = fwPage.fwFindAllActions(2,['ScriptyPageless','ScriptyPageless Option']);
		if(options) {
			var myHead = fwDocument.fwTags.fwFind("head");
			if (myHead){
				var myScript = myHead.fwAddJavaScript();
				myScript.fwAddRaw("sFoptions.set('" + fwItem + "', [")
				var filteredOptions = []
				for( i in options){
					action = options[i];
					if((action.fwParameters['targets'] && action.fwParameters.targets.fwValue == fwItem) || action.fwItem == fwItem){
						filteredOptions.push( fwQuote(options[i].fwItem.toString()) );
					}
				}
				myScript.fwAddRaw(filteredOptions.join(',') + ']);');
				myScript.fwAddRawln('');
			}
		}
	}
	</action-javascript>
</item-action>

<item-action name="ScriptyPageless Option">
<action-appliesto layer non-html32/>
<action-version version="0.1">
ScriptyPageless Option
(c)2011 Walter Lee Davis

Apply the action to any layer to designate a ScriptyPageless option.

</action-version>
<action-file name ="partial" var keepwithhtml/>
<action-itemref name="targets" title="Target" filter="activeTarget"/>
<action-javascript>
	function makePartial(myName,textStream){
		textStream.fwConvertLineEndings = true;
		textStream = fwEncode(textStream);
		outFile = new FWFile;
		if (outFile.fwOpenWrite('_' + myName + '.html',true,"TEXT","R*ch")){
			outFile.fwWrite(textStream);
			outFile.fwClose();
			fwParameters['partial'].fwSpecify(outFile);
			var partial = fwParameters['partial'].toString();
			return partial.substring(1,partial.indexOf('.'));
		}		
		fwParameters['partial'].fwClear();
		return null;
	}
	function removePositioning(target){
		pos = ['top','left','bottom','right','z-index'];
		for(var i = 0; i < pos.length; i++){
			if(GetCSSAttribute(target,pos[i])){
				SetCSSAttribute(target,pos[i],null);
			}
		}
		SetCSSAttribute(target,'position','relative');
	}
	function SetCSSAttribute(tag, attributeName, attributeValue) { 
		// Sets a "CSS" attribute such as "position:absolute" in a tag value 
		// Passing an attribute value of null removes that attribute entirely
		if (tag==null) return; 
		var tagField = tag['style']; 
		if (tagField == null){
			tag['style'] = '"'+attributeName+':'+attributeValue+'"'; 
		}else{
			var tagField = tagField.toString();
			var pairs = tagField.slice(1,-1).split(';');
			var out = new Array();
			if(attributeValue != null && tagField.indexOf(attributeName) < 0) out.push(attributeName+':'+attributeValue);
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					if(attributeValue != null) out.push(attributeName+':'+attributeValue);
				}else{
					out.push(pairs[i]);
				}
			}
			tag['style']= fwQuote(out.join('; ')); 
		}
	} 
	function GetCSSAttribute(tag, attributeName) { 
		// Gets a "CSS" attribute such as "position:absolute" from a tag value 
		// returns NULL if the attribute can not be found 
		if (tag==null) return null; 
		var tagField = tag['style']; 
		if (tagField == null) {
			return null; 
		}else { 
			var tagField = tagField.toString(); 
			var pairs = tagField.slice(1,-1).split(';');
			for(i in pairs){
				pairs[i] = pairs[i].replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"); //javascript equivalent of trim
				if(pairs[i].slice(0,pairs[i].indexOf(':')) == attributeName) {
					return pairs[i].slice(pairs[i].indexOf(':')+1,pairs[i].length);
				}
			}
			return null; 
		} 
	}
	
	function activeTarget(item){
		var options = fwPage.fwFindAllActions(2,'ScriptyPageless');
		if(options) {
			for( i in options){
				if(item == options[i].fwItem) return true;
			}
		}
		return false;
	}
	function fwInterface(){
		if(fwParameters['targets'].fwValue == null){
			var options = fwPage.fwFindAllActions(2,'ScriptyPageless');
			if(options) {
				for(i in options){
					c = options[i].fwItem;
					fwParameters['targets'].fwValue = c;
				}
			}
		}
	}
	function fwBeforeEndBody(){
		var thisItem = fwDocument.fwTags.fwFind("div", fwItem);
		if (thisItem){
			removePositioning(thisItem);
			var code = thisItem.fwToHTML();
			makePartial(thisItem.id.toString().slice(1,-1),code);
			thisItem.fwDelete();
		}
	}

</action-javascript>
</item-action>

